{
   
"users":[

],
"companies":[

],
"cart":[
    
],
"product":[
    {
        "id":0,
        "title":"IPhone 11",
        "price":500,
        "desc":"There are many variations of passages of Lorem Ipsum available, but the majority have suffered alteration in some form, by injected humour, or randomised words which don't look even slightly believable. If you are going to use a passage of Lorem Ipsum, you need to be sure there isn't anything embarrassing hidden in the middle of text",
        "img":"https://images.unsplash.com/photo-1609654984575-f64878202abf?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8MTB8fGlwaG9uZSUyMDEwfGVufDB8fDB8fA%3D%3D&auto=format&fit=crop&w=500&q=60"
    },
    {
        "id":1,
        "title":"IPhone 11 pro",
        "price":700,
        "desc":"There are many variations of passages of Lorem Ipsum available, but the majority have suffered alteration in some form, by injected humour, or randomised words which don't look even slightly believable. If you are going to use a passage of Lorem Ipsum, you need to be sure there isn't anything embarrassing hidden in the middle of text",
        "img":"https://images.unsplash.com/photo-1598327105666-5b89351aff97?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8OXx8aXBob25lJTIwMTB8ZW58MHx8MHx8&auto=format&fit=crop&w=500&q=60"
    },
    {
        "id":2,
        "title":"IPhone 11 pro max",
        "price":800,
        "desc":"There are many variations of passages of Lorem Ipsum available, but the majority have suffered alteration in some form, by injected humour, or randomised words which don't look even slightly believable. If you are going to use a passage of Lorem Ipsum, you need to be sure there isn't anything embarrassing hidden in the middle of text",
        "img":"https://images.unsplash.com/photo-1589798312995-8428138bb1ae?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8N3x8aXBob25lJTIwMTB8ZW58MHx8MHx8&auto=format&fit=crop&w=500&q=60"
    },
    {
        "id":3,
        "title":"IPhone 11 ultra",
        "price":900,
        "desc":"There are many variations of passages of Lorem Ipsum available, but the majority have suffered alteration in some form, by injected humour, or randomised words which don't look even slightly believable. If you are going to use a passage of Lorem Ipsum, you need to be sure there isn't anything embarrassing hidden in the middle of text",
        "img":"https://images.unsplash.com/photo-1603921326210-6edd2d60ca68?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8NXx8aXBob25lJTIwMTB8ZW58MHx8MHx8&auto=format&fit=crop&w=500&q=60"
    },
    {
        "id":4,
        "title":"IPhone 11 ultra pro max",
        "price":1000,
        "desc":"There are many variations of passages of Lorem Ipsum available, but the majority have suffered alteration in some form, by injected humour, or randomised words which don't look even slightly believable. If you are going to use a passage of Lorem Ipsum, you need to be sure there isn't anything embarrassing hidden in the middle of text",
        "img":"https://images.unsplash.com/photo-1603816245457-fe9c80b740ff?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8MTZ8fGlwaG9uZSUyMDEwfGVufDB8fDB8fA%3D%3D&auto=format&fit=crop&w=500&q=60"
    }
] ,
"task":[],
"blogs":[],
"top20angular":[
    {
        "id":1,
        "question":"What is Angular and why is it popular for web developement ?",
        "answer":"Angular Js is open-source framework used for frontend developement.maintained by google and community of developers.It is popular in web developement due to its ability to streamline and simplify developement of dynamic,single page web application.it provides structured framework and set of tools that enable developers to build scalable and maintainable applications.following things also make the Angular special 1.Modularity and Reusability 2.Two way data binding: Angular offers two way data binding ,automatically synchronizing the model and view components,reducing the need for manual dom manipulation and enhancing developement speed.3.component-based architecture4.Dependency injection: Angular's built in dependency injection system facilitates the management od application components and their dependencies.promoting modular design and ease of testing.4 Cross-Platform Developement : Angular supports cross-platform developement for web , mobile and desktop applications using frameworks like lonic and Nativescript. 5 Angular provides tools and technique to optimize application performance , ensuring a smooth and responsive user experience",
        "code":""
    },
    {
        "id":2,
        "question":"Explain the difference between AngularJS and Angular?",
        "answer":"They both are popular frameworks for building dynamic web applications,but they have significant differences 1.Architecture : ANgularJs: AngularJS is an MVC framework, where the application is organized in Model,view,controller. Angular : Angular follows the component based architecture.applications are recognized into components,which are more modular and allow for cleaner structure. Language : AngularJS:It uses JavaScript for Developement Angular: It uses TypeScript superset of JavaScript.TWo way data binding : AngularJs : Two way data binding is a default feature , allowing automatic synchronization of data between model and view Angular : Two way data binding is still available but is more controlled and explicit promoting better performance and understanding of data flow. Change Detection : AngularJs : Digest cycle-based change detection mechanism Angular: uses a more efficient and granular change detection stratergy resulting in improved performance.Rendering : AngularJs : uses Regular DOM manipularion for rendering. Angular : utilizes a virtual DOM and change detection to optimize rendering and improve performance. Mobile Support : AngularJS : Mobile support is limited ,often requiring additional frameworks like lonic for mobile application. Angular : offers better mobile support with frameworks like lonic and NativeScript. allowing the developement of cross-platform mobile apps. performance : Generally offers better performance due to redesigned architecture, improved change detection and rendering optimization. ",
        "code":""
    },
    {
        "id":3,
        "question":"What is data binding in Angular?Describr it's types.",
        "answer":"Data binding in Angular is a mechanism that allows you to establish a connection between the application data , enabling seamless synchronization and communication between two. It simplifies and automates the process of updating the view in response to changes  in the applications state. Interpolation is a one-way data binding technique used to display component data in the view .you can embed variables or expressions within double curly braces that Angular evalute and replace with the corrosponding values. Property Binding : Property binding is a one-way data binding that allows you to set an HTML element's property to the value of component's property or expression <img [src]='imageUrl' 3.Event binding: this allows you to listen for events (clicks) raised by the DOM and exacutes the function in response. Two way Binding : Two way data binding is a combination of property binding and event binding allowing for automatic synchronization of data between the component and the dom.changes in the dom update the component and vice versa <input [(ngModel)]='username'>",
        "code":""
    },
    {
        "id":4,
        "question":"How do you create a component in Angular?",
        "answer":" ng new frontend  ng generate component my-component",
        "code":"https://drive.google.com/file/d/1NkcoLIbdDOkQcDW3mBMuBYWWaR_gXLX_/view?usp=sharing"
    },
    {
        "id":5,
        "question":"Explain the purpose of Angular modules.",
        "answer":"Angular modules are essential organizational features in Angular applications They are used to group related components,directives,pipes,and services into cohesive units,facilitating modularity,reusability and maintainibility of the application.Each application is typically comprised of multiple modules.Here are the key purposes and benifits of Angular modules.1.Modularity: Angular modules help break down a large application into smaller,manageable and reusable parts. this modularity promotes maintainability and improves the organization of codebase.Angular does not have pre-defined list of modules as part of the core framework.instead ,Angular allows developers to create their own custom modules based on the specific needs and features of their application.However there are some commonly used Angular modules and third-party modules that developers frequently use in Angular applications. 1.FormsModule and ReactiveFormsModule : handling forms 2.HTTP ClientModule:To make HTTP requests and interactive with API 3.Routermodule: navigation 4.CommonModule: commonly used directives ngIf ngFor 5.BrowserModule : ensures that application runs in a browser environment 6.NGRx : A powerful state management library for Angular applications,providing modules like store,effects,Actions,and more for handling applications state in a predictable and scalable way.7.ngx translate : A module for implimenting internationalization and localization in angular applications. 8.ngx-pagination : A module for adding pagination to lists in angular application. 9.Angular-charts : customizable charts",
        "code":""
    },
    {
        "id":6,
        "question":"what is dependency injection in Angular, and why is it important?",
        "answer":"An Angular Dependency injection is a design pattern and a core concept that allows you to manage the dependencies of your components and services. It is a technique used to achieve loose coupling and enhance the modularity, reusablity,and testability of your application. In simpler terms dependency injection is about providing the necessary dependencies such as services and objects to a component or service from the outside ,rather than creating them within the component or service itself.This approch decouples the creation and usage of dependencies,making the code more maintainable and easier to manage. Features : Reduced Coupling : Using dependency injection reduces the tight coupling between components and services promoting a more loosly coupled and flexible architecture.this means that components and services can be modified or replaced without affecting other parts of the application.In simpler terms dependency injection is about providing necessary dependencies such as services or other objects to a component or service from the outside ,rather than creating them within the component or service itself. This approch decouples the creation usage of dependencies making the code more maintainable and easier to manage.1.Modularity and Reusability : By injecting dependencies you can isolate the functionality of diffirent parts of your application.Those components and services can be reused in various parts of the application or even in diffirent application,promoting modularity and reusability.2.Flexibility and Maintanibility : Dependency injection allows you to change or update the behavior of a component or service by providing diffirent implimentations of the injected dependency.This flexibility makes it easier to maintain and modify the application without impacting other part of the codebase. 3.Testability : with dependency injection you can easily provide mock or stub implimentations od dependencies for testing purposes.This enables effective unit testing of components and services as you can control and manipulate the behavior of the dependencies during testing. 4.SEpration of Concerns : Dependency injection helps seprate the creation of objects (concern with how the object is created) from the usage of objects(how the object is used).This sepration leads to cleaner and more maintainable code.5.Reduced Coupling : using dependency injection reduces the tight coupling between components and services promoting a more loosely coupled and flexible architecture. This means that components and services can be modified or replaced without affecting other parts of application.6.Single reusability principle : Dependency injection encourages adherence to the SRP by promoting the idea that a class or function should have a single responsibility,making the codebase more organized and easier to comrehend.",
        "code":""

    },
    {
        "id":7,
        "question":"How do you handle forms in angular?",
        "answer":"Follow code",
        "code":"https://drive.google.com/file/d/1X7UVBcXot9yEt6Hjwt45pddi25ateKrx/view?usp=sharing"
    },
    {
        "id":8,
        "question":"What are angular directives?Provide examples.",
        "answer":"Angular directives are special instructions or markers in the DOM that Angular recognizes and uses to manipulate or extend the behavior and appearance of elements.They are an essential part of Angular applications,allowing developers to build dynamic ,interactive, and data-driven user interfaces.These are following : 1.Component Directives : Components are directives with a template.They encapsulate a portion of the user interface,along with associated behavior,into a reusable unit.Components are the most commonly used directives in Angular applications.like in @Component({ selector:'app-example',template:'<p>This is an example component.</p>'}) . 2.Attribute directives: Attribute directives change the appearance or behavior of a DOM element by adding or removing attributes.They are used to modify the behavior of existing elements. import{Directive,ElemRef,Renderer2} from '@angular/core'; @Directive({selector:'[appHighlight]'})  follow code ",
        "code":"https://drive.google.com/drive/folders/1Hzmuy9B8ToEQP6TK0a57GnRvPYsXeEE8?usp=sharing"
    },
    {
        "id":9,
        "question":"Describe Angulars HTTP client and its usage.",
        "answer":"Angulars HTTP client is a powerful tool that simplifies making HTTP requests to web servers,interacting with API's, and handling responses in Angular application.the module name is @angular/common/http it provides an easy to use API for sending HTTP requests and processing responses asynchronously.",
        "code":""
    },
    {
        "id":10,
        "question":"Explain the concept of Angular services and their role in application.",
        "answer":"Angular services are a fundamental and powerful feature that plays a critical role in organizing and sharing code across an application.A service in Angular is a class that is typically responsible for specific set of functions or tasks, such as fetching data from a server,performing business logic,or managing state.Key features of Angular services :1.Reusability and modularity: Services encourage code reusability by allowing you to centralize and encapsulate specific functionalities.you can use the same service in multiple components,promoting a modular architecture.2.Seprations of concerns: services help seprate business logic and data from components this promotes the single responsibility principle and enhances code maintainability.3.Dependency injection.4.Singleton Instances: By default,Angular services are singleton instances,meaning that the angular injector provides and maintains a single instance of a service throughout the application.This ensures consistant state and behavior across the application.5.Communication between Components : Services can store and manage shared data or state,allowing components to exchange information indirectly through the service.6.State Management : Service can manage application state,including user authentication,preferences,or any other application-level-state.this centralized state management is crucial for complex applications.7.Encapsulation of Data and Logic : services encapsulate data and logic related to perticular feature or functionality. This encapsulation keeps the implementation details hidden and provides a clear interface for components to interact with. 8.API calls and External Interactions: services handle API calls and interactions with external systems .They abstract away the HTTP requests,webSocket communication,or any other form of interaction,making it easier to manage data exchange. ",
        "code":""
    },
    {
        "id":11,
        "question":"What is routing in Angular?",
        "answer":"The Router is used to set up and manage applications routing 1.Routes: Routes define the mapping between a URL path and specific component or a set of components to display when the URL matches the path.Each route is typically defined by a path,a component to render,and optionally other properties like guards,data,and children routes. 2.Route Configuration : The Route configuration is usually done in a seprate module called the Routing Module. this module defines the routes using the RouterModule.forRoot() method or RouterModule.forChild().3.Router outlet:this is a directive used in the application's template to mark the area where the component corrosponding to the current route should be rendered.when you navigate to a specific URL.Angular loads the associated component and inserts it into the router outlet.4.Router Link : This is a directive used in the templates to create clickable links that trigger navigation to specific route.It's typically used in the navigation menu or other areas where you want to provide navigation within application.5.Router Service : The Angular Router service provides methods to navigate to specific routes programatically.you can use methods like navigate,navigateByUrl,navigate[route] to navigate to diffirent routes within your application.6.Route Parameters: Routes can have parameters that are extracted from the URL . These parameters can be used to pass date to a component based on the route.7.Guards: Route Guards are used to control access to a route.They can be used to prevent unauthorized access or perform certain actions before navigation to a route. "
    }
],
"day1angular":[],
"day2angular":[],
"day3angular":[],
"day4angular":[],
"day5angular":[],
"day6angular":[],
"day7angular":[],

"day1react":[
    {
        "id":1,
         "question":"What is React.js? How does it differ from other Frontend frameworks?",
         "answer":"React.js is a open-source-js library used to build user interfaces(UI) for web applications. It is developed by Jordan Walke (Facebook) and maintained by community of developers . one of the mai  difference between React.js and other frameworks is it's approach to rendering it uses Virtual Dom instead of directly manipulating the browsers Dom . React.js can update the ui more efficiently by only updating trhe parts of the page that have changed ,rather than updating the entire page .React.js focus on buildingreusable components React components are independent ,reusable pieces of code that can be combined to create complex UI's. this enables developers to write less code and makes it easier .overall React.js is a powerfull tool for building dynamic ,responsive and scalable user interfaces for web applications .It is based on declerative programming ,Which means that you describe what you want the UI look like and react.js handles the updates and rendering . It can be used to build single page applications (SPA's) which are web applications that load a single HTML page and dynamically update the content as the user interacts with the application . React.js is used by many popular websites and applications including Facebook,Instagram,NetFlix,Airbnb.It has large active comunity of developers who contribute to the library."
         ,"code":""
    },
    {
        "id":2,
        "question":"Can youn explain concept of the Virtual DOM in React.js?",
        "answer":"In traditional web applications ,The browser's DOM is used to represent the structure of the web page .The DOM is a tree like structure of HTML elements, and each time the state of an application changes ,the browser has to update the DOM to reflest those changes .This process is called reconcillation and it canbe slow and resource-intensive, especially for complex user interfaces .React.js addresses this issue by using a virtual DOM ,The virtual DOM is a lightweight representation of the actual DOM ,created and maintained by React.js whenever the state of a react component changes ,React.js compares the updated virtual DOM to the previous version to identify the specific changes that need to be made to actual DOM rather than updating the entire DOM it only updates the changes results in faster rendering times and a smoother user experience Real DOM------Lightweight copy of virtual DOM (Update)----->update real DOM with those changes . "
        ,"code":""
    },
    {
        "id":3,
        "question":"what are react components and how they work?",
        "answer":"React components are independent , reusable pieces of code that define part of a user interface in ract application it canbe simple such as a button or a form field or complex ,such as a chart or a data grid .By composing these components together you can create more complex UI's  .React Components are divided into two types 1. Functional Component 2. Class Component . Functional Component: are just JavaScript functions that take in props and return jsx. functional component dont have state,but they can use useState hook to achieve similar functionality. functional components don't have lifecycle methods but they can use useEffect hook to achieve similar functionality. functional components are more resuable as they are just functions which can be easily reused across multiple components. functional components are usually faster and more efficient than class components.It can not use this keyword. it use return to render jsx. Class Component: Class Components are classes that extend the React Component Class and have a render method.class components have state, which is used to store data that can be change over time.class components havelifecycle methods which are methods that get called at diffirent points in the component's lifecycle . the class components are less reusable due to the complex inheritance hierchy and render methods. it uses this keyword to refer their own instance. use render method to render jsx. When it comes to state management In class component state is initialized in the constructor but In functional component state is initialized using the useState hook    ",
        "code":"https://drive.google.com/file/d/1hI_tAKHjOmIbAf07Tt1V4XEiYDBc-IWi/view?usp=sharing"
    },
    {
        "id":4,
        "question":"What is the significance of render method in React?",
        "answer":"It is a required method in a react class component that is responsible for returning a description of what component should render on screen. when render method is called , React generates a virtual DOM representation of the component's output based on the jsx returned by the render() method . whenever the state or props of a component change ,react will call the render() method again to regenerate the virtual DOM .React then compares new virtual DOM with previous virtual DOm and only updates the parts of the actual DOM",
        "code":""
    },
    {
        "id":5,
        "question":"What is jsx? why it is used in react.js?",
        "answer":"jsx stands for javascript XML. that allows you to write HTML like code in your jacascript.it looks similar to HTML but it is not HTML instead it is a syntax extension that allows you do define React elements which is lightweight description of what should be displayed on the screen. it is not required in react and you can use plain js to define UI if you prefer .but jsx has some benifits like 1.it improves readability 2.better performance 3.Intuative syntax(better understanding of syntax) 4.It is faster and more efficient",
        "code":""
    },
    {
        "id":6,
        "question":"How does js enable you to reuse components across different parts of your application?",
        "answer":"Component Composition: This is the process of building complex UI's. Props:(short for properties) are a way to pass data from a parent component to a child component we can use the same component in diffirent parts of your application with props you can customize your components dynamically By passing props down to child components",
        "code":""
    },
    {
        "id":7,
        "question":"what is the difference between functional and class components?",
        "answer":"Class Component : 1.Defined as Javascript class that extends the react component class 2. Class components has state 3.render method is required that returns the UI of the component 3.It can use lifecycle methods  Functional Component: 1.defined as a plain js function 2.It uses return to to render Ui of the component 3.do not have any lifecycle methods 3.It does not require any state or lifecycle method.",
        "code":""
    },
    {
        "id":8,
        "question":"What is server-side-rendering and client side rendering?",
        "answer":"lets take a scenerio where you are somebody who creates cakes and you have to dispatch it to your customers now you have 2 ways The first way is you dispatch all the ingridients with the instructions to the customer and let them build the cake themselves and the second way is you build the cakes yourself and then send them. in the first scenerio you dont know how well the client would create the cake? how tasty it would be and they are using the right ingridients in the right mix and so on. but in the second case you are sure that even though a little bit work on your end but the end result would be much more tasty and consistant. similarly ,if you are doing client side rendering you are sending all the javascript and basically the whole chunk of javascript to the client and let the client construct the dom . if you are doing server-side rendering you construct the whole page on your server on your end and send a fast HTML representation of the page alongside more javascript if you want to to the client "
    }
],
"day2react":[
    {
        "id":1,
        "question":"What is the difference between jsx and javascript syntax?",
        "answer":"jsx-------> 1.looks like HTML 2.Allows you to use HTML like syntax to define components 3.Use specifically for use with React.js components.......| js----> 1.Looks like regular javascript 2.Requires the use of React.createElement() method to define components 3.harder to read than jsx 4.can be used to define components in a wider varity of situations ",
        "code":"https://drive.google.com/file/d/1gEKjjr-_uBrd9QeWRpQLPHTZHZQQs_8J/view?usp=sharing"
    },
    {
        "id":2,
        "question":"How do you use props to pass data between components in React.js and what are some best practices to follow when doing so?",
        "answer":"Props: is a way to pass data from parent component to child component. some of the best practices are 1.Always pass data down the component tree, from parent to child .this ensures that the data flow is unidirectional and makes it easier to reason about your application state 2.Avoid modifying props directly. props should be considerd read-only and any changes to props should be made in the parent component and passed down again. 3. Use default props to provide fallback values ,you can define default values for props using the default props property on your component. 4.Be careful when passing complex objects or functions as props. It's generally better to keep your props simple and avoid passing complex data structures or functions if possible.",
        "code":"https://drive.google.com/file/d/1_KdLrBKR2KzwIWutpeQ4cGluW1NhgtAi/view?usp=sharing"
    },
    {
       "id":3,
       "question":"What is the significance of the children props in react js and how can it be used to render dynamic content within a component?",
       "answer":"You can pass other components as children to a component, allowing you to compose complex UIs from simpler components.",
       "code":"https://drive.google.com/file/d/1YIQuMs-wnG16FZdYldqi1LfIFC12j41g/view?usp=sharing"
    },
    {
        "id":4,
        "question":"Can you explain concept of prop drilling with example? How to avoid it?",
        "answer":"prop drilling is a concept in React.js where date is passed down from a parent component to a child component,and then passed down to another child component ,and so on. untill it reaches the component it needed. This can lead to a situation where components that don't actually need the data are receiving it as a prop , which can be inefficient and lead to complex and hard to maintain code. To avoid prop drilling one approach is to use the CONTEXT API in React : It allows you to pass data down to components without having to pass it explicitely as props at each level of the component tree.",
        "code":"https://drive.google.com/file/d/1NMG8JmOdb60BBHkr96UwAe-OdNdaHmoE/view?usp=sharing"
    },
    {
        "id":5,
        "question":"How can you avoid prop-drilling using context api?",
        "answer":" Context API allows you to pass data down to components without having to pass it explicitely as props at each level of the component tree .Please refer code to get answer",
        "code":"https://drive.google.com/file/d/1RKcmagNHk4wYXA-zMiFnsZfk15CIKcDl/view?usp=sharing"
    },
    {
        "id":6,
        "question":"How do you use conditional rendering in React.js and what are Some common patterns for doing so?",
        "answer":"Conditional Rendering: ability to render diffirent components or content based on certain conditions 1.if else 2.Ternary Operator 3.Logical Operator 4.Switch Statements . ----> follow the code to understand how these operators works",
        "code":"https://drive.google.com/file/d/10SjN25bIq-XZHhrskfgK_w51vYAIrfHJ/view?usp=sharing"
    },
    {
        "id":7,
        "question":"What is the significance of the Key prop in React.js , and how can it be used in combination with conditional rendering to optimize performance?",
        "answer":"In React Key prop is special attribute to help to identify which items have changed,been added,or been removed from a list of rendered items. when a list of elements is rendered ,React assigns a unique identifier to each element in the form of key .this allows react to track each element and determine whether it has been ,updated ,moved or deleted . without key react may be forced to re-render the entire list even if only one item has changed which can result in performance issue.",
        "code":"https://drive.google.com/file/d/1_Zc-4SbmAn8UKHp1g2gn5K00GL3jai6A/view?usp=sharing"
    }
],
"day3react":[
    {
        "id":1,
        "question":"What is state management in React.js, and why is it important?",
        "answer":"State management in react.js is refer to the process of managing the data that is used by components. It involves defining and updating the state of the component to reflect changes in the data. proper state management is essential for building scalable and maintainable applications in react.js",
        "code":"https://drive.google.com/file/d/1jx4GVn9RWC7GSlhe88nSVmOEjc0gNi2Y/view?usp=sharing"
    },
    {
        "id":2,
        "question":"What is the difference between state and props?",
        "answer":"Props:1. props are used to customize a component and pass data from one component to another.2.props are read only and should not be modified directly within a component.3. props are passed down from a parent component to child component.4.perops are accessable via this.props within a class component or as an argument to a functional component. 5. props are used for one way data flow from parent to child components.______State:1.state is used to manage data within a component and trigger a re-render of the component when updated.2.state is mutable and can be updated within a component using setState().3.state is accessible via this.state within a class component or as a hook useState in a functional component.4.state is managed within a component and can be passed down to child components as props.5.state is used for managing internal state within a component and triggering a re-render when necessary.",
        "code":"https://drive.google.com/file/d/1QoIZhMxzpzAHjolVPve_I9PWLmRsAEbc/view?usp=sharing"
    },
    {
        "id":3,
        "question":"What is the difference between functional and class components?",
        "answer":"refer code to understand answer.",
        "code":"https://drive.google.com/file/d/1aVGPlnl3-Fz0kNWNIRE-TAiZ6aCW7MWy/view?usp=sharing"
    },
    {
        "id":4,
        "question":"What are the advantages and disadvantages of using React.js in web development?",
        "answer":"Advantages of using React.js in web development:1.Reusable components: React.js provides a modular approach to building web applications with reusable components that can be easily shared across different parts of an application. This saves time and effort in coding, and promotes consistency in the user interface.2.High performance: React.js uses a virtual DOM to efficiently render changes to the user interface, resulting in faster and smoother performance compared to traditional methods.3.Large community and ecosystem: React.js has a large and active community, with many third-party libraries and tools available for use in web development.4.SEO-friendly: React.js can be easily optimized for search engines, as it allows for server-side rendering.___Disadvantages of using React.js in web development:1.Steep learning curve: React.js has a relatively steep learning curve, especially for developers who are new to the library or to web development in general.2.Overhead: React.js has a lot of overhead, and can require additional tools and libraries to be installed and configured, which can be time-consuming.",
        "code":""
    },
    {
        "id":5,
        "question":"What is the setState() method in React, and how does it differ from directly assigning state?",
        "answer":"In React, setState() is a method provided by the Component class that is used to update the state of a component. It is the recommended way to update state because it is asynchronous, which means that React can batch multiple setState() calls together for better performance. setState() takes an object or a function that returns an object as its argument, and merges the new state into the current state of the component. Directly assigning state by modifying the state object directly is not recommended because it can lead to unexpected results. In fact, React will issue a warning if you try to modify state directly. For example, if you have a state object with two properties and you modify one of them directly, the other property will be lost.",
        "code":"https://drive.google.com/file/d/191qEAxra05dgm_Bm1V_4M3pkK0fgoyGM/view?usp=sharing"
    },
    {
       "id":6,
       "question":"How does state management differ between class components and functional components in React?",
       "answer":""
    }
],
"day4react":[],
"day5react":[],
"day6react":[
    {
        "id":1,
        "question":"What is Redux, and what problem does it solve in React.js applications?",
        "answer":"1.Redux is a state management library for JavaScript applications, particularly those built with React.2.It provides a centralized way of managing application state, which can help to simplify the flow of data through an application.3.Redux works by maintaining a single, centralized store for an application's state, which can be accessed and updated by any part of the application.4.Redux can help to solve problems such as prop drilling, where data must be passed down through multiple levels of components, and complex state management that can become difficult to maintain.5.Redux accomplishes this by defining actions and reducers, which handle updates to the store's state in a predictable and scalable way.6.Actions are objects that describe changes to the state, and are triggered by events in the application.7.Reducers are pure functions that take an action and the current state, and return a new state based on the action.",
        "code":""
    },
    {
        "id":2,
        "question":"How does the Redux Store work, and what are its main features?",
        "answer":"The Redux Store is a single, centralized place to store the state of an entire React.js application. It is an object that holds the entire state tree of the application and provides a way to dispatch actions to update the state.Here are the main features of the Redux Store:Centralized state management: The store holds the entire state of the application, making it easy to access and update from any component in the app.Immutable state: The store's state is immutable, which means that it cannot be changed directly. Instead, changes to the state are made by dispatching actions, which are then handled by reducers.Predictable state changes: The state changes in the store are predictable because they are made by dispatching actions, which are handled by pure functions called reducers. Reducers take in the current state and an action, and return a new state based on that action.",
        "code":""
    },
    {
        "id":3,
        "question":"What are actions in Redux, and how do they relate to state changes?",
        "answer":"In Redux, actions are plain JavaScript objects that represent an intention to change the state of the application. They describe what has happened in the application, such as a user clicking a button or data being received from an API. Actions contain a type field that specifies the type of action being performed and an optional payload field that provides additional data needed to update the state.Actions are used to trigger state changes in the Redux Store through reducers. When an action is dispatched, it is sent to the Store, which calls the appropriate reducer function to update the state based on the action type and payload. The reducer creates a new copy of the state with the necessary changes applied and returns it, replacing the previous state in the Store.Actions are an essential part of the unidirectional data flow in Redux, which helps to ensure that the state is predictable and easy to reason about. They make it easy to keep track of all the changes that have occurred in the application and provide a clear and consistent way to modify the state.",
        "code":""
    },
    {
        "id":4,
        "question":"What are reducers in Redux, and what role do they play in managing state?",
        "answer":"Reducers are functions in Redux that specify how the application's state should be updated in response to actions. They take in the current state and an action object as arguments, and return the updated state.Reducers are responsible for determining how the state changes in response to actions. They must be written in a way that is pure, meaning they do not modify the original state object, and they always return a new state object, even if the state has not changed.Reducers are the only way to modify the state in a Redux application, and they are typically combined into a single root reducer using the combineReducers() function. The root reducer is then passed to the Redux store, where it is used to manage the application state.Take the current state and an action as input.Determine how the state should change in response to the action.Return the new state as output.Must be pure functions that do not modify the original state object.Are combined into a single root reducer using combineReducers().Are responsible for managing the application state in Redux.",
        "code":""
    },
    {
        "id":5,
        "question":"How do you create a Redux store in a React.js application, and what are the required elements?",
        "answer":"1.Import the createStore function from the redux package.Create a reducer function to handle the state changes in your application.Use the createStore function to create a new store, passing in your reducer function as an argument.Optionally, you can set the initial state of your store by passing it as a second argument to the createStore function.",
        "code":"https://drive.google.com/file/d/1fAzR1K8_cb9s9MFya0M9dfeBaKewtm_5/view?usp=sharing"
    },
    {
        "id":6,
        "question":"What is the difference between dispatching an action and invoking a reducer in Redux?",
        "answer":"Dispaching an action means sending a message to redux store ,indicating that state change should be occur. An action is an object that contains a 'type' field and any additional data that may be necessary to update the state.invoking a reducer means calling a function that takes the current state and an action as argument ,and returns the new state of the application.reducers are pure functions that should not modify the existing state, but instead should return a new state based on the action that was dispatched.",
        "code":"https://drive.google.com/file/d/1sRsAJNWcgCtmYCqOMn-plDUvgdof_dFk/view?usp=sharing"
    },
    {
        "id":7,
        "question":"How can you connect a component to a Redux store, and what are the benefits of doing so?",
        "answer":"In order to connect a component to a Redux store in a React.js application, you need to use the connect function provided by the react-redux library. This function takes two arguments:1.mapStateToProps:a function that maps the state from the Redux store to props that are passed to the connected component.2.mapDispatchToProps:a function that maps action creators to props that are passed to the connected component. The benefits of connecting a component to a Redux store include:Simplified state management: Connecting a component to a Redux store allows the component to access and update the state without having to pass state down through multiple levels of the component hierarchy.2.Centralized state management:By using a global store, Redux provides a centralized location for managing application state, which can help simplify state management and prevent common bugs associated with unidirectional data flow.3.Improved performance:Connecting a component to a Redux store allows the component to subscribe to updates to the state that are relevant to it, which can help improve performance by reducing unnecessary re-renders.",
        "code":"https://drive.google.com/file/d/1p9WByHbLOm0PDWuuQGQsAaxnLipZriOX/view?usp=sharing"
    },
    {
        "id":8,
        "question":"What is the purpose of the connect() function in the React-Redux library?",
        "answer":"The connect() function in the React-Redux library is used to connect a React component to the Redux store.It is a higher-order function that returns a new component, which wraps the original component and provides it with the data it needs from the store.The main purpose of the connect() function is to provide a convenient way to access and manipulate the store's data from within a React component. By connecting a component to the store you can:Access data from the store's stateDispatch actions to update the store's state Re-render the component automatically when the store's state changes The connect() function takes two arguments: mapStateToProps and mapDispatchToProps.__1.mapStateToProps: A function that maps the store's state to the component's props.__2.mapDispatchToProps: A function that maps action creators to the component's props.By using these functions, the connect() function provides the component with the data it needs from the store, and the ability to dispatch actions to update the store's state.",
        "code":""
    },
    {
        "id":9,
        "question":"What are thunks in Redux, and how can they be used to handle asynchronous actions?",
        "answer":"Thunks are functions that allow you to delay the execution of some logic until a later time. In the context of Redux, thunks are used to handle asynchronous actions, such as fetching data from a server.Normally, when you dispatch an action in Redux, the reducer immediately updates the state based on that action. However, when you dispatch a thunk, it first executes some additional logic (such as making an API call) before dispatching a regular action. This allows you to handle asynchronous actions in a more organized way.To use thunks in Redux, you typically need to install the 'redux-thunk' middleware and create a thunk function that returns another function. The inner function receives the 'dispatch' method as an argument, which it can use to dispatch regular actions at a later time.",
        "code":""
    }
],
"day7react":[],
"fastReact":[
    {
        "id":1,
        "question":"What is React",
        "answer":"React.js is a open-source-js library used to build user interfaces(UI) for web applications. It is developed by Jordan Walke (Facebook) and maintained by community of developers . one of the main difference between React.js and other frameworks is it's approach to rendering it uses Virtual Dom instead of directly manipulating the browsers Dom . React.js can update the ui more efficiently by only updating the parts of the page that have changed ,rather than updating the entire page .React.js focus on buildingreusable components React components are independent ,reusable pieces of code that can be combined to create complex UI's. this enables developers to write less code and makes it easier .overall React.js is a powerfull tool for building dynamic ,responsive and scalable user interfaces for web applications .It is based on declerative programming ,Which means that you describe what you want the UI look like and react.js handles the updates and rendering . It can be used to build single page applications (SPA's) which are web applications that load a single HTML page and dynamically update the content as the user interacts with the application . React.js is used by many popular websites and applications including Facebook,Instagram,NetFlix,Airbnb.It has large active comunity of developers who contribute to the library. ",
        "code":""
    },
    {
        "id":2,
        "question":"What is JSX?",
        "answer":"jsx stands for javascript XML. that allows you to write HTML like code in your jacascript.it looks similar to HTML but it is not HTML instead it is a syntax extension that allows you do define React elements which is lightweight description of what should be displayed on the screen. it is not required in react and you can use plain js to define UI if you prefer .but jsx has some benifits like 1.it improves readability 2.better performance 3.Intuative syntax(better understanding of syntax) 4.It is faster and more efficient. 5.Rather than writing React.createElement we write plane HTML inside our JS itself.6.There are tools like Babel which converts our JSX code to simple React.createElement Code and then it rendered in the webpage.Important : JSX is not a feature of react.Browsers cant directly Understans JSX it uses Babel to convert the code to React.createElement",
        "code":""
    },
    {
        "id":3,
        "question":"How JSX code will get converted into React.createElement code? also explain how Babel will help in this conversion?",
        "answer":"When you write a JSX code it needs to be transformed into equivalent javascript code that uses React.createElement.Babel is popular JavaScript compiler that performs this transformation.Step:-1. Babel Configuration: When we create new react app using Create React App (CRA) , Babel is automatically configured and installed as a part of the project.Step-2:JSX is not a valid JavaScript so BAbel needs to convert it into a format that the JavaScript engine can understand. Step-3: AST Generation : BAbel generates Abstract Syntax Tree(AST) from the parsed JSX code.The AST is a hierarchical representation of the code's structure.the AST is in OBJECT form.Step-4: Transforming JSX: Babel then transforms the JSX AST into equivalent JavaScript code. It replaces JSx elements with 'React.createElement' calls with the element type,props and the child elements as arguments.Step-5:Integration with React: The transformed code assumes that 'React is available in the scope. This is why it's common to import 'React' at the top of your files.",
        "code":""
    },
    {
        "id":4,
        "question":"What is the difference between State and Props?",
        "answer":"Props:1. props are used to customize a component and pass data from one component to another.2.props are read only and should not be modified directly within a component.3. props are passed down from a parent component to child component.4.props are accessable via this.props within a class component or as an argument to a functional component. 5. props are used for one way data flow from parent to child components.______State:1.state is used to manage data within a component and trigger a re-render of the component when updated.2.state is mutable and can be updated within a component using setState().3.state is accessible via this.state within a class component or as a hook useState in a functional component.4.state is managed within a component and can be passed down to child components as props.5.state is used for managing internal state within a component and triggering a re-render when necessary.",
        "code":"https://drive.google.com/file/d/1QoIZhMxzpzAHjolVPve_I9PWLmRsAEbc/view?usp=sharing"
    },
    {
        "id":5,
        "question":"How do you use conditional rendering in React.js and what are Some common patterns for doing so?",
        "answer":"Conditional Rendering: ability to render diffirent components or content based on certain conditions 1.if else 2.Ternary Operator 3.Logical Operator 4.Switch Statements . ----> follow the code to understand how these operators works",
        "code":"https://drive.google.com/file/d/10SjN25bIq-XZHhrskfgK_w51vYAIrfHJ/view?usp=sharing"
    }
],
"day1js":[
    {
        "id":1,
        "question":"What is Js?",
        "answer":"1.Javascript is High-Level Dynamic Interpreted Programming Language commonly used in web developement.2.used to add interactivity and functionality to web pages ,web applications ,making them more engaging and user friendly .3.created by BRENDAN EICH in 1995 when he was working at NetScape Communications 3.This language is supported by all major web browsers 4.also used on the server side e.g. Node.Js 5.Has large active community with numerous library and frameworks available to facilitate developement.6. Js runs natively in all major web browsers which means that it can be executed on the client side without required any additional software or plugins that makes it a versatile and accessible choice for building web applications. ",
        "code":""
    },
    {
        "id":2,
        "question":"What are web browsers?",
        "answer":"1.Software application that allows users to access and view websites on the www. 2.It retreives information from web servers and display it on the users device in the user friendly format such as text,images,videos.3.web browsers are designed to interpret display HTML,CSS,Js code. 4.It acts as an interface between the user and web server---USER-->BROWSER<----SERVER.5. allowing the users to navigate through web pages ,submit forms and interpret with dynamic content. e.g. Chrome,Firefox,Safari,Microsoft-edge,opera.",
        "code":""    
    },
    {
        "id":3,
        "question":"What are web-servers?",
        "answer":"1.Web server is a computer program that serves content to clients over the www it recieves requests from clients (browsers) and responds with web pages,documents. 2.It is essential component of the internet infrastructure allowing users to access websites and other online resources.3. e.g. Apache : Robert McCool (1995),Nginx : The software was created by Igor Sysoev and publicly released in 2004. Nginx is free and open-source software, released under the terms of the 2-clause BSD license.,microsoft : Internet Information Services, also known as IIS, is a Microsoft web server that runs on Windows operating system and is used to exchange static and dynamic web content with internet users. IIS can be used to host, deploy, and manage web applications using technologies such as ASP.NET and PHP., NodeJs : developed by Ryan Dahl May 27, 2009. Node.js is a back-end JavaScript runtime environment, runs on the V8 JavaScript Engine, and executes JavaScript code outside a web browser. ",
        "code":""
    },
    {
        "id":4,
        "question":"What is Client-Server-Model?",
        "answer":"1.When we type / search url of any website on chrome (browser) --->browser sends requests to web server hosting the website ----> The web server process that request retrieves the requested resource and sends back to the browser.",
        "code":""
    },
    {
        "id":5,
        "question":"What are various protocols to communicate with clients?",
        "answer":"1.HTTP:This protocol is used to transfer data over the internet.It is not a secure protocol as it transmits login credentials and data in plain text making it vulnarable to interception and eavesdropping...| ----| 2.HTTPS:S for secure and it provides secure data transfer over the internet by encrypting it---| 3.FTP(FIle Transfer Protocol): Used for transferring files between computers on a network.It is an application layer protocol that uses client server model. It operates on PORT 21 . It allows user to upload ,download,manage files on a remote server.It has two modes of operations 1.Active mode 2.Passive mode ...| Active Mode: FTP server initiates the connection to the client computer for data transfer. Passive Mode : Client initiates the connection to the server. It is not a secure protocol as it transmits login credentials and data in plain text making it vulnarable to interception and eavesdropping...| FTPS: File Transfer Protocol Secure : Same like HTTPS , It supports for SSL/TLS encryption, providing secure data transfer and remote file management.FTP/SFTP encrypts all data and commands sent between the client and server making it more secure than FTP and FTPS...| SMT Protocol: Simple Mail Transfer Protocol : It is used in sending and receiving email messages between servers on a network. It operates on PORT 25 . It works by sending email messages from a client to a mail server or from one mail server to another .the mail messages are composed of a header which contains the actual message.",
        "code":""

    },
    {
        "id":6,
        "question":"Why do we use https over http?",
        "answer":"HTTP is not a secure and transmits data in plain text. HTTPS provides end-to-end encryption , which means that any data transmitted between the client and server is encrypted and can not be read by unauthorized users . this protects sensitive information such as login credentials ,creadit card information and personal data from being intercepted and stolen-----1.Authentication: HTTPS uses digital certificates to verify the identity of the server and ensure that the client is communicating with the correct website .this prevents man in the middle attacks where an attacker intercepts the communication between the client and the server and impersonates one of them .2.SEO:Google has confirmed that https is a ranking factor in its search algorithm.which means that websites that use https may rank higher in search results than those use http.-----3.Compliance: many industries and regulations require websites to use https to protect user data such as payment card industry data security standerd (PcIDSS) for e-commerce websites and general data protection regulation(GDPR) for websites that collect personal data. overall HTTPS provides a more secure and transworthy way of transmitting data over the internet , and it is incresingly becoming the standerd for websites that value the privacy and security of the users.",
        "code":""
    },
    {
        "id":7,
        "question":"What is SSL and TLS encryption?",
        "answer":"SSL: SECURE SOCKET LAYER (developed by Netscape communications corporation in the mid-1990's)_____TLS: Transport Layer Security (It is a successer of SSL and standerdized by IETF Internet Engineering Taskforce , It is updated version of SSL)  these two are cryptographic protocols that provide secure communication over the internet. Both use encryption to protect data transmission and prevent unauthorized access.    Hand Shake key access: It works by establishing a secure connection between two parties such as web server and a client web browser involves following steps 1.The client initiates connection to the server and requests secure server response with its digital certificates which contains the servers public key and other identifying information.3. The client uses the servers public key to encrypt a random session key, which is sent to the server . the server decrypts the session key and uses it to encrypt and decrypt data transmitted between client and server.4. Data Transfer:Once the connection is established ,data is transmitted between the client and the server in encrypted form, ensuring that it cannot be intercepted and read by unauthorized users.SSL/TLS encryption is used in a wide range of applications ,including web browsing ,email instant messing and file transfers .It is essential for protecting sensitive information such as login credentials,credit card information ,personal data transmitted over the internet. ",
        "code":""
    },
    {
        "id":8,
        "question":"Define ways of hoisting website on the server",
        "answer":"1.Shared Hoisting : Multiple websites are hoisted on the same web server (It uses software to keep each website file seprate).2.Virtual private server:Single physical server is divided into multipe virtual servers each of them can use one or more websites. 3.Dedicated server: Clients rents an entire physical server for their own use (full Control).4. Cloud hosting: multiple servers are used to serve website(to prevent server down).   To specify web server to host website you need to register a domain name and configure its DNS (Domain Name System) records to point to the IP address of the web server where your website is hosted.Here are steps to specify a web server to host a website 1.Choose a domain name register :A domain name register is a company that manages the registration of domain names . you need to choose a register and register your domain name. 2. Choose a hosting provider : A web hosting provider is a company that provides the server space and resources to host website you need to choose hosting provider and signup for web hosting plan .3. Setup your website on the web server: Once you have signed up for a hosting plan you need to setup your website on the web server .this involves uploading your website files and configuring the web server software to serve your website.4.Configure DNS records: to point your domain name to the IP address of the web server where your website is hosted ,you need to configure your domains DNS records .this involves creating a record that maps your domain name to the IP address of the web server.5. Wait for DNS propogation : After you have configured your DNS records ,It can take some time for changes to propogate accross the internet from a minute to a several hours . once the DNS changes have propogated ,your website will be accessible at your domain name and users will be able to access it by typing your domain name in the web browser.",
        "code":""
    },
    {
        "id":9,
        "question":"Specifications of JS why do we prefer JS over other languages for web developement?",
        "answer":"1.Client Side Scripting: In Client Side Scripting the web server sends the HTML,CSS,JS files to the users browser and the browser then execute JS code to make the web page more interactive and dynamic.eg.In validation form where user is alerted if they enter invalid data into a form field, or create dynamic menu's.It is benificial because It reduces the workload on the web server . since most of the processing is done on the user's computer this results in faster page load times and more responsive UI.It can be disabled or blocked by the users web browser and that can be vulnarable to security issues if not implimented properly.2.Compatibility: Js is supported by all modern web browsers ,making it a universal language for web -developement. this allows developers to create web applications that works accross diffirent platforms and devices.3.Frameworks and libraries: frameworks:AngularJs,ReactJs,JQuery: provides pre-written code and tools to simplify web developement tasks and speed up the developement process. 4. Integration with HTML,CSS: It integrate seamlessly with HTML,CSS (the other two core technologies used in web developement). allows developers to create dynamic web pages that combine static content with interactive elements.5.Backend Developement: It can be used for backend developement with platforms such as Node.Js allowing developers to cretae server-side applications using JS.",
        "code":""
    },
    {
        "id":10,
        "question":"What are Data-types in JS ?",
        "answer":"1.Primitive : String,Number,boolean,null,undefined,symbol 2.Non Primitive: Object,function ----------1.Primitive-------> a.Immutable:primitive value returns new value When you create a primitive value, a new piece of memory is allocated to store that value. This memory location is fixed and cannot be changed. If you assign a new value to the same variable, a new memory location is allocated for the new value.For example, when you declare and initialize a variable x with the value 10, a new memory location is allocated to store the value 10. If you then re-assign the value of x to 5, a new memory location is allocated to store the value 5, and the original memory location storing the value 10 remains unchanged.This means that primitive data types are immutable because you cannot change the value stored in the original memory location once it has been created. If you want to change the value of a variable, you must create a new memory location and assign the new value to that location. b.It is stored by value: when a variable is assigned a value of primitive datatype, a copy of the value is created and stored in memory e.g. let num1=10; let num2=num1 (here num2 is assigned a copy of num1) num1=20 console.log(num2)====>10 changes to one variable do not affect others. c.It is faster to access: due to stored by a value it is faster to access. 2.Non-Primitive Data-Type: a.It is mutable let person ={name:'ABC'} person.name='DEF' console.log(person.name)===>DEF b. It is stored by reference: after assigining value to variable the variable holds a reference to the memory location where the value is stored .Any changes made to the variable affect the original value. let obj1={name:'ABC',age:30} let obj2=obj1  obj1.age=40  console.log(obj1)==>{name:'ABC',age:40} console.log(obj2)==>{name:'ABC',age:40} Here you can see that if we update any value will be reflecting everywhere.c.Due to stored by a reference this is slower to access",
        "code":""
    },
    {
     "id":11,
     "question" :"What is the difference between == and  === ?",
     "answer":"Both of them are comparison operators ==: check only value not data-type e.g console.log(5=='5')-true ====> Type corcion:Js will attempt to convert one of the values to match the other based on set of implicit conversion rules. ===: Strict equality operator checks both value and datatype. console.log(5==='5')-false ",
     "code" :""  
    },
    {
     "id":12,
     "question":"What is variable in JS ?",
     "answer":"It is named container for storing data values. the data stored in a variable can be of any data-type number,string,boolean,object. we have 3 keywords to declare variables var,let,const. ",
     "code":""
    },
    {
        "id":13,
        "question":"What is the difference between var,let,const?",
        "answer":"1.var:a.used to declare variable with functional scope b.available within entire function including nested functions. c. variable declared with var are hoisted. var declared with var is moved to the top of the function or global scope regardless where the actual decleration appears in the code. d. console.log(myvar) //undefined  var myvar=5 |  var a=5 var a=5 console.log(a) //5  | var a=10 a=9 console.log(a) //9._____2.let: a.It is used to declare variable with block scope. b.Only available within block they are declared in. c. hoisting is not available. d. console.log(mylet) //Uncaught referenceerror :mylet is not defined let mylet=5. e. Random questions : let a=7 let a=7 console.log(a) // SyntaxError: Identifier a has already been declared |  let a=9 a=10 console.log(a) //10.___const:a.const is used to declare variables that can not be reassigned. b. used to declare variable with block scope. c. hoisting is not available d.Some random questions: 1.console.log(a) //ReferenceError: cannot access a before initialization. const a=3 . | 2.const a=3 const a=1 console.log(a) //TypeError:Assignment to constant variable| in general It is recomended to use let or const instead of var as it can help to prevent unexpected behavior due to hoisting and scope issue. ",
        "code":""
    },
    {
        "id":14,
        "question":"Explain diffirent types of operators in Js?",
        "answer":"1.Arithmetic: +,-,/,*,%(remainder) 2.Comparison Operator: compare two values and returns boolean value e.g. let a=10 let b=5 a>b-true a>=b-true 3.Assignment Operator: let a=10 ,a+=5 It is used to assign values (+,-,*,/) 4. Unary Operator:let a=10  Unary plus: console.log(+a)  Unary minus: console.log(-a) typeof: let a=1 typeof(a) = number 5. Ternary operator: It is a short-hand way of writing if else statement let a=10 let b=5  if(a>b){ console.log('a is greater than b')} else{console.log('a is less than b')} ======> a>b? a is greater than b : a is less than b} ",
        "code":""
    },
    {
        "id":15,
        "question":"What are control structures in JS ?",
        "answer":"Control structures in javascript are used to control the flow of execution based on certain conditions e.g. if else , for loop , while loop , switch statements , do while loop.",
        "code":"https://drive.google.com/file/d/1gw20JmHjnw4tDLIgKUgEKq9snxHW2u8j/view?usp=sharing"
    },
    {
        "id":16,
        "question":"What is function in Js ?",
        "answer":"A block of code that can be reused through out  your code .It allows you to encapsulate a piece of functionality . just give it a name and then call it from anywhere in your code",
        "code":"https://drive.google.com/file/d/1JnGdbrRn1tnOpEnW495tEEbzARlznFLM/view?usp=sharing"
    },
    {
        "id":17,
        "question":"What is scope in JS ? tell the difference between local and global scope in function ?",
        "answer":"Scope : refers to the visibility or accessibiity of variable within code. to determine where in your that variable can be accessed and manipulated 1.Global scope 2.Local scope .  Global scope : 1.refers to the variable that are declared outside of any function or block these variable can be accessed from anywhere in your code including inside functions or blocks . 2.Local scope: refers the variables that are declared inside of a function or a block,     these variables can only accessed from within that function.",
        "code":"https://drive.google.com/file/d/1QDr2TyuUtLOgX2yqr-dccKsUzs_aLR8P/view?usp=sharing"
    },
    {
        "id":18,
        "question":"What is Hoisting in JavaScript ?",
        "answer":"It is a behavior where variable and function declerations are moved at the top of their respective scopes during the compilation phase even if they appear later in the code. USE: you can use a variable or function before it has been declared in your code and JS will still recognize it. however it is generally considerd good practice to declare variable and functions at the top of their respective scope to avoid confusion and improve code readability. It's important to note that only variable and function declarations are hoisted, not their assignments or initializations. ",
        "code":""
    },
    {
        "id":19,
        "question":"Explain the use of 'this' keyword in JS.",
        "answer":"It is used to refer current object or context in which a function or method is called . the value is determined at runtime and depends on how the function is called. In JavaScript, there are two ways of binding the this keyword to an object: implicit binding and explicit binding. Here are the main differences between them:Implicit Binding: This happens when this is automatically bound to the object to the left of the dot (.) when a function is called. In other words, the this keyword is implicitly bound to the object that the function is called on. This type of binding is determined by the calling context.Explicit Binding: This happens when this is explicitly bound to an object using call(), apply(), or bind() methods. These methods allow you to specify the value of this when calling a function.",
        "code":"https://drive.google.com/file/d/1TEuuvLb1zdr3TL9Dseq3pbKcwu7b4STD/view?usp=sharing"
    },
    {  
        "id":20,
         "question":"Explain 'this' keyword in Arrow functions.",
         "answer":"Arrow function has lexical binding: Lexical binding is a mechanism in JavaScript that determines how the value of this is determined in a function. It is based on the lexical scope, which is the scope in which a variable is declared.",
         "code":"https://drive.google.com/file/d/1KNQXTjHncOPqAlWlSUGPN8VJ2PWWx_76/view?usp=sharing"
    }
],
"day2js":[
    {
        "id":1,
        "question":"What is the DOM (Document Object Model) and why is it important for web development?",
        "answer":"The Document Object Model (DOM) is like a map of a web page that JavaScript can use to interact with and change the page. It represents the structure of the page as a tree of objects. Each object corresponds to an element, attribute, or text on the page.The DOM is important because it allows developers to make web pages interactive. With JavaScript, they can access and modify the content, layout, and style of the page. For example, they can change text, add or remove elements, and update the appearance of the page based on user actions.By using the DOM, developers can create dynamic and responsive web applications that can adapt and change in real-time. It provides a set of tools and methods to easily manipulate the elements on a web page, making it easier to build interactive and engaging websites.",
        "code":""
    },
    {
        "id":2,
        "question":"How does the DOM tree structure relate to HTML elements on a web page?",
        "answer":"The DOM tree structure closely mirrors the structure of HTML elements on a web page. When a web page is loaded into a browser, the browser parses the HTML code and creates a representation of the page in the form of a tree structure called the Document Object Model (DOM).Each HTML element, such as <html>, <head>, <body>, <div>, <p>, <h1>, etc., is represented by a corresponding node in the DOM tree. These nodes are organized in a hierarchical structure, with the <html> element at the top as the root node, and the other elements as its child nodes, grandchildren nodes, and so on.",
        "code":"https://drive.google.com/file/d/12VgK_J4rgDu-PIeufH3t4T84ANqioEmX/view?usp=sharing"
    },
    {
        "id":3,
        "question":"Explain the concept of DOM manipulation and give examples of common tasks performed using JavaScript.",
        "answer":"DOM manipulation refers to the process of using JavaScript to dynamically modify the Document Object Model (DOM) of a web page. It involves making changes to the structure, content, or style of the web page in response to user interactions, events, or programmatic actions.Here are a few examples of common tasks performed using JavaScript DOM manipulation:Changing text content: You can update the text of an element by accessing its node in the DOM tree and modifying its textContent property. For example, element.textContent = New text; would change the text content of the element to New text. Modifying HTML structure: You can add, remove, or modify elements in the DOM tree. For instance, you can create a new element using document.createElement('tagName'), append it to an existing element with parentElement.appendChild(newElement), or remove an element using element.remove().Updating element attributes: JavaScript allows you to modify attributes of elements, such as class, id, src, href, etc. You can access and modify these attributes using properties like element.setAttribute('attributeName', 'value') or element.attributeName = 'value'. Changing element styles: You can dynamically modify the styles of elements using JavaScript. For example, you can access an element's style property and set specific CSS properties like element.style.color = 'red' to change its text color. Responding to user actions: Event listeners can be added to elements to trigger specific actions when certain events occur, such as clicking a button, hovering over an element, or submitting a form. JavaScript can then manipulate the DOM based on these events. DOM manipulation with JavaScript enables developers to create dynamic and interactive web pages by updating content, structure, and styles in real-time based on user interactions or other events.",
        "code":"https://drive.google.com/file/d/1_dXFlQVLosBzAaucCaK-lN3RXHyn7hUK/view?usp=sharing"
    },
    {
        "id":4,
        "question":"What are some methods and properties available in JavaScript to access and manipulate DOM elements?",
        "answer":"JavaScript provides a variety of methods and properties to access and manipulate DOM elements. These methods and properties allow developers to interact with elements, retrieve information, modify content, and apply styles. Here are some commonly used ones: 1.document.getElementById(): This method allows you to select an element by its unique ID. It returns a reference to the element, which you can then use to manipulate it.2.document.querySelector() and document.querySelectorAll(): These methods allow you to select elements using CSS selector syntax. querySelector() returns the first matching element, while querySelectorAll() returns a collection of all matching elements.3.element.textContent: This property allows you to access or modify the text content of an element.4.element.innerHTML: This property allows you to access or modify the HTML content of an element.5.element.setAttribute() and element.getAttribute(): These methods allow you to set or retrieve the value of an attribute on an element.6.element.style: This property allows you to access or modify the inline styles of an element.These are just a few examples of the many methods and properties available in JavaScript for accessing and manipulating DOM elements. By utilizing these methods and properties effectively, you can dynamically modify the content, structure, and style of web pages, creating interactive and engaging user experiences.",
        "code":"https://drive.google.com/file/d/1tm3gb3tuN16XfkoRfUxBL4h8ohMk0mJC/view?usp=sharing"
    },
    {
        "id":5,
        "question":"What is the difference between the innerHTML and textContent properties in JavaScript?",
        "answer":"The innerHTML and textContent properties in JavaScript are used to access or modify the content of an element, but they differ in how they handle HTML markup.he innerHTML property retrieves or sets the HTML content within an element, including any HTML tags and their associated markup. It returns a string that represents the HTML content as it appears within the element.On the other hand, the textContent property retrieves or sets only the textual content of an element, excluding any HTML tags. It returns a string representing the concatenated textual content of all the element's descendants.",
        "code":"https://drive.google.com/file/d/1Vs17J-oShe339RjtawkqC4vYrC-6yZkb/view?usp=sharing"
    },
    {
        "id":6,
        "question":"How can you dynamically create and add elements to the DOM using JavaScript?",
        "answer":"To dynamically create and add elements to the DOM using JavaScript, you can use the following steps:1.Create a new element: Use the document.createElement() method to create a new element of the desired type.2.Set element properties and attributes: If desired, you can modify properties and attributes of the newly created element.3.Set element content: You can set the content of the element by modifying its textContent or innerHTML property.4.Attach the new element to the DOM: To add the newly created element to the DOM, you need to identify the parent element to which you want to append the new element. Use the appendChild() method on the parent element to attach the new element as its child.",
        "code":"https://drive.google.com/file/d/1lbIAPMwDPIYLRO1jZA1_SAsTSS_FUZSU/view?usp=sharing"
    },
    {
        "id":7,
        "question":"What is event delegation in JavaScript? How does it work and why is it useful?",
        "answer":"Event delegation is a technique in JavaScript where instead of attaching an event listener to individual elements, you attach it to a parent element. The parent element then handles events triggered by its child elements through event bubbling or event capturing.",
         "code":"https://drive.google.com/file/d/1YVm4sMuFFx0CqJlAuGDlDIhw60SxhJ6r/view?usp=sharing"    
    },
    {
        "id":8,
        "question":"Explain the concept of event bubbling and event capturing in JavaScript.",
        "answer":"Event Bubbling:We can understand event bubbling as a sequence of calling the event handlers when one element is nested in another element, and both the elements have registered listeners for the same event. So beginning from the deepest element to its parents covering all its ancestors on the way to top to bottom, calling is performed......| Event capturing: Event Capturing is opposite to event bubbling, where in event capturing, an event moves from the outermost element to the target. Otherwise, in case of event bubbling, the event movement begins from the target to the outermost element in the file. Event Capturing is performed before event bubbling but capturing is used very rarely because event bubbling is sufficient to handle the event flow.....|Stopping bubbling:Beginning from the target and moving towards the top is the bubbling i.e. starting from the child to its parent, it moves straight upwards. But a handler can also take decision to stop the bubbling when the event has been processed completely. In JavaScript, we use the event.stopPropagation () method.",
        "code":"https://drive.google.com/drive/folders/1gqX-aGBDMU_yih4AVR-oR5V0LYODpzdK?usp=sharing"
    },
    {
        "id":9,
        "question":"How would you prevent the default behavior of an event in JavaScript?",
        "answer":"the event.preventDefault() method is used to prevent the default submission behavior.When a form is submitted, it typically sends a request to the server and reloads the page. However, by calling event.preventDefault(), the default behavior of the form submission is prevented, and the code inside the event handler can be executed without the page being reloaded.In this specific code, after preventing the form submission, the event handler retrieves the values entered in the username and password fields. It then checks if the entered username is already taken by checking the existence of an item with that username in the localStorage. If the username is already taken, an alert is displayed to the user, and the execution of the event handler is stopped using return.If the username is not taken, the username and password are stored in the localStorage using localStorage.setItem(). Finally, the code redirects the user to the login page by changing the window.location.href to './login.html'.By preventing the default form submission behavior, the code can perform custom validations, store data, and control the user's navigation without triggering the default form submission action.",
        "code":"https://drive.google.com/file/d/1CEFaLH8RgSXJ3K3BKkkv-lZv9SjCkeso/view?usp=sharing"
    },
    {
        "id":10,
        "question":"What is the purpose of the this keyword in event handlers?",
        "answer":"In event handlers, the this keyword refers to the element that triggered the event. It allows you to access and manipulate the properties and methods of that specific element within the event handler function.The purpose of using this in event handlers is to provide a convenient way to interact with the element that triggered the event. It allows you to access the element's attributes, modify its styles, retrieve its value, or perform any other operations specific to that element.",
        "code":"https://drive.google.com/file/d/1EmgvTjjfDC9OPKsGHjlo0M8Ydc6BGFgw/view?usp=sharing"
    },
    {
        "id":11,
        "question":"Explain the concept of event propagation and how it can be controlled in JavaScript.",
        "answer":"Event propagation, also known as event flow, is the process through which events in the DOM are propagated or transmitted from the target element that triggered the event to its parent elements or ancestor elements in the DOM tree. There are two types of event propagation: event bubbling and event capturing.Event Bubbling:In event bubbling, when an event occurs on an element, it first triggers the event on that element and then propagates to its parent elements in the DOM tree, one level at a time, until it reaches the root element (usually the <html> element).  Event listeners attached to parent elements can also be triggered by the same event. This is the default behavior for most events in JavaScript. Event Capturing: In event capturing, the event is triggered on the root element first, then propagates down through its descendant elements until it reaches the target element. Event listeners attached to ancestor elements can be triggered before the event reaches the target element.",
        "code":""
    }
],
"day3js":[
    {
        "id":1,
        "question":"What is a closure in JavaScript? Provide an example.",
        "answer":"A closure can be defined as a JavaScript feature in which the inner function has access to the outer function variable. The closure has three scope chains listed as follows:Access to its own scope.Access to the variables of the outer function.Access to the global variables.",
        "code":"https://drive.google.com/drive/folders/1vfHfvl6gcQ6WGrvvbFzmneqcf4CLMtAS?usp=sharing"
    },
    {
        "id":2,
        "question":"How does JavaScript handle scope and variable access in closures?",
        "answer":"Variable Capture: When a function is defined within another function, it capture or retains access to all the variables in its parent function's scope, including the parameters and local variables.Lexical Scope Chain: Each function has its own scope, and when a variable is accessed within a function, JavaScript first looks for the variable within the function's local scope. If the variable is not found, it searches the next outer scope in the scope chain until it reaches the global scope.Retaining Reference: Closures retain a reference to their parent scopes even after the parent functions have completed execution. This allows them to access and manipulate variables from their parent scopes.Garbage Collection: JavaScript's garbage collector automatically handles memory management. If a closure is still referenced by any variable or function, the variables in its parent scope will remain in memory. Once the closure and all references to it are no longer reachable, the memory is freed up.Closures provide powerful functionality by allowing functions to access and manipulate variables from their parent scopes, providing encapsulation and data privacy. However, it's important to be mindful of memory usage when working with closures, as they can lead to potential memory leaks if not managed properly.",
        "code":""
    },
    {
        "id":3,
        "question":"Explain the concept of prototype-based inheritance in JavaScript.",
        "answer":"The JavaScript inheritance is a mechanism that allows us to create new classes on the basis of already existing classes. It provides flexibility to the child class to reuse the methods and variables of a parent class.It facilitates child class to acquire all the properties and behavior of its parent class.",
        "code":"https://drive.google.com/file/d/1eprxbucUrZddiQ4yVEEDlPRQOD-BT9KJ/view?usp=sharing"
    },
    {
        "id":4,
        "question":"OOPS concept :- 1.Classes and Objects",
        "answer":"Classes and Objects: A class is a blueprint or template that defines the properties (attributes) and behaviors (methods) that an object of that class will have. An object is an instance of a class, representing a specific entity in the program.",
        "code":"https://drive.google.com/file/d/1vJzqn2vqePcuNM-cKuln1yHu6Vxbvp7e/view?usp=sharing"
    },
    {
        "id":5,
        "question":"OOPS concept:- 2.Encapsulation",
        "answer":"Encapsulation: Encapsulation is the practice of bundling data and the methods that operate on that data together within a class. It allows for data hiding, where the internal state of an object is kept private and can only be accessed through the defined methods.",
        "code":"https://drive.google.com/file/d/1Dd9jdZGWyydB7kdumdXjC_LNPjOOqbJA/view?usp=sharing"
    },
    {
        "id":6,
        "question":"OOPS concept:- 3.Inheritance",
        "answer":"Inheritance enables the creation of a new class (derived class or child class) by inheriting the properties and methods from an existing class (base class or parent class). The derived class can extend or override the behavior of the base class, promoting code reuse and establishing a hierarchical relationship between classes.",
        "code":"https://drive.google.com/file/d/1zzMC21l_Jz_whLSozCJ0Ba2HCbor8wKV/view?usp=sharing"
    },
    {
        "id":7,
        "question":"OOPS concept:- 4.Polymorphism",
        "answer":"Polymorphism allows objects of different classes to be treated as objects of a common superclass. It enables different classes to define their own implementation of methods with the same name, providing flexibility and extensibility in handling different object types through a common interface.",
        "code":"https://drive.google.com/file/d/1NIKaH_a6CG_4t0gzOuqODYjJbIN6oxYb/view?usp=sharing"
    },
    {
        "id":8,
        "question":"OOPS concept:- 5.Abstraction",
        "answer":"Abstraction is a concept in programming that allows us to represent complex systems or entities in a simplified manner, by focusing on the essential features and hiding unnecessary details. It involves breaking down a system into smaller, more manageable components, and defining interfaces or behaviors that provide a high-level view of how those components interact, without revealing the internal workings.n simpler terms, abstraction allows us to think about and work with complex things using simplified models. It enables us to understand and use objects or systems without having to understand every intricate detail, making our code more readable, maintainable, and scalable. Abstraction helps in managing complexity and promoting code reusability, as we can create abstract classes or interfaces that define common behaviors, while leaving the implementation details to the specific classes or objects that inherit from them.",
        "code":"https://drive.google.com/file/d/1S-s0wYTrAslBml6-r3Q5QWLqX0jQm2W0/view?usp=sharing,"
    },
    {
        "id":9,
        "question":"What is the difference between classical inheritance and prototypal inheritance?",
        "answer":"Classical Inheritance: Classical inheritance is based on the concept of classes and objects.In classical inheritance, classes are used to create blueprints that define the properties and behaviors of objects.Objects are instances of classes, and they inherit properties and behaviors from their class.Prototypal Inheritance:Prototypal inheritance is based on the concept of objects and prototypes. It is commonly found in languages like JavaScript.In prototypal inheritance, objects are created directly from other objects. Every object has an internal link to another object called its prototype.Objects can inherit properties and behaviors from their prototype object, and the chain of prototypes forms a prototype chain.Objects can be created using the Object.create() method or through constructor functions.summery:  classical inheritance, where classes and a hierarchical structure are used, and prototypal inheritance, where objects are directly created from other objects and inherit properties and behaviors from their prototypes.",
        "code":"https://drive.google.com/file/d/1FAb7Xrn-E9AKXUcNWlsm9qNnY30VC_MK/view?usp=sharing"
    },
    {
        "id":10,
        "question":"What are the advantages of using closures in JavaScript? Provide real-world use cases.",
        "answer":"Closures in JavaScript offer several advantages and can be used in various real-world scenarios. Here are some advantages and use cases:Encapsulation: Closures allow for data encapsulation by creating a private scope. Variables and functions defined within a closure are not accessible from the outside, providing a level of privacy and preventing unwanted access or modification.Data Privacy: Closures enable the concept of private variables. Variables defined within a closure are accessible only within that closure and its nested functions, making them inaccessible from the outside world. This helps in preventing unintentional modification or interference with the data.Function Factories: Closures can be used to create function factories, where a function returns another function with pre-configured settings or behavior. This is useful when creating multiple instances of similar functions with different configurations.Event Handlers: Closures are commonly used in event handling scenarios. Event listeners often require access to variables or functions defined in their enclosing scope. Closures allow you to maintain the context and access necessary data even when the event handler is executed at a later time.Asynchronous Operations: Closures are often utilized in asynchronous operations such as callbacks and promises. They help in capturing and preserving the necessary context or data required for the asynchronous operation to execute correctly, even when it occurs at a later point in time.Memoization and Caching: Closures can be used to implement memoization and caching techniques. By storing the results of expensive computations in a closure, subsequent calls to the same function with the same inputs can be retrieved from the closure's stored data, improving performance.Overall, closures in JavaScript offer powerful capabilities for encapsulation, data privacy, maintaining state, and creating function factories. They are commonly used in scenarios where persistent state or access to variables in an outer scope is required, such as event handling, asynchronous operations, and optimizing performance through memoization.",
        "code":""
    },
    {
        "id":11,
        "question":"What is the difference between a function declaration and a function expression in JavaScript?",
        "answer":"Function Declaration:A function declaration is a statement that defines a named function using the function keyword followed by the function name, a list of parameters in parentheses, and the function body enclosed in curly braces.Key points about function declarations:Function declarations are hoisted, which means they are moved to the top of their scope during the compilation phase, allowing them to be called before they are defined in the code.Function declarations create a variable in the current scope with the same name as the function name and assign the function to that variable.Function declarations can be used anywhere within their scope.Function Expression:A function expression is an assignment of a function to a variable or a constant. It defines an anonymous function or a function without a name.Key points about function expressions:Function expressions are not hoisted like function declarations. They must be defined before they are used in the code.The function is assigned to a variable or constant, which can be used to call the function.Function expressions can be either named or anonymous, but anonymous function expressions are more common.",
        "code":"https://drive.google.com/file/d/1IZv-WzdaoXfcoITayOeAoXa7rC4nYW4b/view?usp=sharing"
    },
    {
        "id":12,
        "question":"How does the this keyword behave in different contexts in JavaScript?",
        "answer":"1.Global Scope:When this is used in the global scope (outside of any function or object), it refers to the global object, which is usually the window object in browsers or the global object in Node.js.2.Object Method: When this is used within a method of an object, it refers to the object itself. The value of this is determined at the time the method is called.3.Event Handlers:In event handler functions, such as those used with DOM events, this typically refers to the element that triggered the event.Constructor Function:When this is used inside a constructor function, it refers to the newly created object that is being instantiated.5.Explicit Binding:The value of this can be explicitly set using the call(), apply(), or bind() methods. These methods allow you to specify the context in which a function should be invoked.",
        "code":"https://drive.google.com/file/d/1Rs6S0onMGRymA_SJ4IUZVvosAaDBRu98/view?usp=sharing"
    },
    {
        "id":12,
        "question":"Explain how the concept of hoisting works in JavaScript and provide an example.",
        "answer":"Hoisting is a behavior in JavaScript where variable and function declarations are moved to the top of their containing scope during the compilation phase, before the code is executed. This means that regardless of where declarations appear in the code, they are effectively hoisted to the top of their scope.However, it's important to note that only the declarations are hoisted, not the initializations or assignments. Variables are initialized with the value undefined by default until their assignments are encountered during runtime.",
        "code":""
    }


],
"day4js":[
    {
        "id":1,
        "question":"What is a callback function in JavaScript?How is it used to handle asynchronous operations?",
        "answer":"A callback function in JavaScript is a function that is passed as an argument to another function,and it's intended to be called after the completion of a perticular task or operation.The idea behind callback function is to ensure that certain code dosent execute untill specific asynchronous operation has finished it's work.",
        "code":"https://drive.google.com/file/d/1zdUNIsdMBZ029rdWwMjZ5KqePid4-P_H/view?usp=sharing"
    },
    {
        "id":2,
        "question":"Explain callback hell and how it can be mitigated or avoided?",
        "answer":"Callback hell,also known as the pyramid of doom,is a situation that arise in javascript when dealing with multiple asynchronous operations using callbackfunctions.It occurs when you have multiple nested callback functions,making the code hard to read,manage,and maintain.This can lead to decreased code readability,difficulty in  error handeling and increased complexity. To mitigate or avoid callback hell ,several stratergies can be applied:Use named Functions : Instead of using anonymous callback functions , define named function and pass them as callbacks.This approch improves code readability.2.Modularization and refracting : Break down complex asynchronous operations into smaller ,manageable functions. By modularizing code and breaking it into smaller functions you can reduce the nesting and improve readability.3.Use Promises : Utilize Promises to chain asynchronous operations in a more structured way,making the code easier to read and manage.4.Async Await : Take advantage of the async/await syntax which provides a more asynchronous like structure for handeling asynchronous operations making the code more readable.  ",
        "code":""
    }
],
"day5js":[],
"day6js":[],
"day7js":[],

"top20html":[
    {
        "id":1,
        "question":"What is HTML and what does it stand for?",
        "answer":"HTML stands for Hypertext Markup Language.It is the standard markup language used for creating the structure and presenting the content of web pages.HTML uses a set of tags and attributes to define the various elements and components of a webpage such as headings, paragraphs, links, images, tables, forms, and more.It provides a way to structure and organize the content, allowing web browsers to interpret and display the web pages to users. HTML is the backbone of the web and is essential for creating and designing websites.",
        "code":""
    },
    {
        "id":2,
        "question":"What are the different versions of HTML?",
        "answer":"HTML (HyperText Markup Language): This was the first version of HTML, introduced in 1991.HTML2: This version was released in 1995 and introduced new features like tables and form elements.HTML3: Released in 1997, HTML3 added support for more interactive elements and improved styling options.HTML4: HTML4, released in 1997, brought further enhancements and introduced features such as framesets, scripting support with JavaScript, and the concept of Cascading Style Sheets (CSS).XHTML (Extensible HyperText Markup Language): XHTML is an XML-based version of HTML, following stricter rules of syntax. It was introduced in 2000.HTML5: HTML5 is the latest and most significant version of HTML. It was released in 2014 and introduced numerous new features and improvements, including semantic elements, multimedia support, canvas for drawing, video and audio elements, local storage, geolocation, and more. HTML5 also provided better support for mobile devices and responsive design.",
        "code":""
    },
    {
        "id":3,
        "question":"What is the purpose of a doctype declaration in HTML?",
        "answer":"A doctype declaration in HTML is used to specify the version of HTML being used in a web document.It is placed at the very beginning of an HTML file, before the opening <html> tag. The primary purpose of a doctype declaration is to inform the web browser or parser about the markup language and version in which the document is written.",
        "code":""
    },
    {
        "id":4,
        "question":"What are the differences between HTML and XHTML?",
        "answer":"HTML (Hypertext Markup Language) and XHTML (Extensible Hypertext Markup Language) are both markup languages used for creating web pages, but they have some key differences:Syntax: HTML has a more forgiving syntax, allowing certain elements to be unclosed or self-closed without issues. XHTML, on the other hand, follows stricter syntax rules borrowed from XML, requiring all elements to be properly closed and nested correctly.Tag Naming: HTML allows tag names to be written in any case (uppercase or lowercase), while XHTML mandates that all tag names must be written in lowercase.Attribute Quoting: In HTML, attribute values can be left unquoted or wrapped in single quotes ('') or double quotes. In XHTML, all attribute values must be enclosed in double quotes.Self-Closing Tags: HTML has a few elements that are traditionally written without a closing tag, such as <br>, <img>, and <input>. In XHTML, all elements must be properly closed, including those that are self-closing, using the <tag /> syntax.It's important to note that XHTML was initially introduced as the successor to HTML, promoting stricter adherence to XML standards. However, due to its strictness and compatibility issues with existing web pages, HTML5 has become the de facto standard for web development, and the use of XHTML has diminished significantly.",
        "code":""
    },
    {
        "id":5,
        "question":"What is the significance of the meta tag in HTML",
        "answer":"The <meta> tag in HTML is used to provide metadata or additional information about an HTML document. It does not represent visible content on the web page but instead conveys information to browsers, search engines, and other web-related services.Character Encoding: One common use of the <meta> tag is to specify the character encoding for the HTML document. This is achieved by including the following meta tag in the <head> section of the HTML document: <meta charset='UTF-8'>The charset attribute indicates the character encoding, such as UTF-8, which ensures proper rendering of special characters and international text.Page Description: Another important use of the <meta> tag is to provide a concise description of the webpage content. This is often used by search engines to display a summary or snippet of the page in search results. The following meta tag is used for this purpose:<meta name='description' content='Description of the webpage'>Viewport Configuration: The <meta> tag can also be used to define the viewport settings for responsive web design. This allows the webpage to adjust its layout and scale appropriately on different devices. For example:<meta name='viewport' content='width=device-width, initial-scale=1.0'>Search Engine Optimization (SEO): Various meta tags can be used to enhance the visibility and search engine ranking of web pages. For instance, the <meta> tag can specify keywords, author, robots instructions, and more.",
        "code":""
    },
    {
        "id":6,
        "question":"Explain the difference between <div> and <span>?",
        "answer":"<div> and <span> are both commonly used container elements in HTML, but they have different purposes and default behaviors:<div>: The <div> element is a block-level container that is used to group and structure larger sections of content on a webpage. It represents a division or a generic container with no specific meaning. By default, <div> elements start on a new line and occupy the full width available in their parent container. They can contain other block-level elements, such as headings, paragraphs, lists, images, and more. <div> elements are often styled and targeted with CSS for layout and formatting purposes.<span>: The <span> element, on the other hand, is an inline container used to apply styles or target specific portions of text within a larger block of content. It has no inherent semantic meaning and does not affect the flow of the content. By default, <span> elements are displayed inline, meaning they do not create line breaks. They are commonly used to apply CSS styles, such as color, font, or background, to a specific portion of text or to encapsulate and target elements within a sentence or paragraph.",
        "code":""
    },
    {
        "id":7,
        "question":"What are the different types of heading tags in HTML?",
        "answer":"HTML provides six heading tags, ranging from <h1> to <h6>, to represent different levels of headings. These heading tags are used to structure the content hierarchy and indicate the importance and hierarchy of the text within a webpage. Here's a breakdown of the different heading tags: <h1>: The <h1> tag represents the highest level of heading and is typically used for the main heading or the title of the page. It carries the most weight in terms of importance. <h2>: The <h2> tag represents a second-level heading, slightly lower in hierarchy compared to <h1>. It is used for section headings or major subsections. <h3> to <h6>: The remaining heading tags, <h3> to <h6>, represent lower levels of headings, progressively decreasing in importance. They are used for subheadings within sections, subsections, and so on.",
        "code":""
    },
    {
        "id":8,
        "question":"How do you create a hyperlink in HTML?",
        "answer":"To create a hyperlink in HTML, you can use the <a> (anchor) element along with the href attribute to specify the destination URL or target location. Here's an example: The href attribute specifies the URL or web address  <a href='https://www.example.com'>Click here</a> 2. href attribute points to the 'about.html' page located in the same directory as the current HTML file. You can also create a link to another page within your website by specifying the relative URL. <a href='/about.html'>About Us</a>  3. The target attribute can take values like '_blank' to open the link in a new browser tab or window, 'self' to open the link in the same window, or 'parent' or 'top' for more specific targeting.examples 1.<header>:Represents the introductory section or the container for a site's header content, often containing site branding, navigation, and introductory text.2.<nav>: Indicates a section of the page dedicated to navigation menus and links.3.<article>: Represents a self-contained, independent piece of content, such as a blog post, news article, or forum post.4.<section>: Represents a thematic grouping of content, often used to divide a webpage into distinct sections or chapters.5.<aside>: Represents content that is tangentially related to the main content, such as sidebars, callouts, or related links.6.<footer>: Represents the footer or the closing section of a page, typically containing copyright information, contact details, and related links.By using these semantic elements and others like <main>, <figure>, <figcaption>, <time>, <blockquote>, etc., you provide additional meaning and structure to your HTML, which benefits both human readers and machine interpreters like search engines and assistive technologies.      Benefits of using semantic HTML include:Accessibility: Semantic HTML improves the accessibility of your web pages, allowing assistive technologies like screen readers to better understand and navigate the content.SEO: Search engines rely on the semantic structure of your HTML to understand the content and context of your web pages. Using semantic elements can positively impact search engine rankings and improve the visibility of your website.Code Maintainability: Semantic HTML promotes clear and organized code, making it easier for developers to understand, maintain, and collaborate on the project.",
        "code":""
    },
    {
        "id":9,
        "question":"Explain the concept of semantic HTML.",
        "answer":"The key idea behind semantic HTML is to use elements that accurately represent the content and its relationship within the document. By using semantic elements , you provide clear and meaningful structure to your HTML, which offers benifits in terms of accessibility ,search engine optimization(SEO), and code readibility.",
        "code":""
    },
    {
        "id":10,
        "question":"What are the differences between inline and block-level elements in HTML?",
        "answer":"Block-level elements: Block-level elements start on a new line and take up the full available width of their parent container. Examples of block-level elements include <div>, <p>, <h1> to <h6>, <ul>, <li>, <table>, and <form> Block-level elements: Block-level elements respect the box model, which means you can set their width, height, padding, margin, and border properties. They can be manipulated using CSS properties to control their appearance and layout.Block-level elements can contain other block-level and inline elements. They can also hold significant amounts of content and are commonly used for grouping and structuring larger sections of a webpage.Line Breaks  Block-level elements cause line breaks before and after themselves, creating a vertical separation between content. Each block-level element is displayed on its own line..Inline elements: Inline elements do not start on a new line and occupy only the necessary width to contain their content. they flow alongside other inline elements and do not create line breaks.Example <span>,<p>,<strong>, <em>, <img>, <input>, and <label>.Inline elements: Inline elements have a more limited box model. While you can set their width, height, padding, and margin horizontally, they do not typically affect the layout vertically. The top and bottom margins and paddings of inline elements do not cause vertical spacing or push other elements away. Inline elements can only contain other inline elements or text nodes. They are typically used for wrapping small portions of text or applying styles to specific parts of the content.Inline elements do not cause line breaks. They flow alongside other inline elements and wrap based on the available width.",
        "code":""
    },
    {
        "id":11,
        "question":"What is the purpose of the alt attribute in an image tag?",
        "answer":"The purpose of the alt attribute in an <img> tag is to provide alternative text for the image.The alt attribute serves several important functions: 1.Accessibility: The alt attribute is crucial for web accessibility. When an image cannot be displayed or is not accessible to a user, assistive technologies such as screen readers rely on the alt attribute to provide a textual description of the image. This ensures that visually impaired users can still understand the content and context of the image.2.Image Unavailability: In situations where an image fails to load or the user has disabled image display in their browser, the alt attribute acts as a fallback. The alternative text specified in the alt attribute is displayed instead of the image, providing a text-based representation of the image's content or purpose.Search Engine Optimization (SEO):Search engines utilize the alt attribute to understand the content and context of an image. It helps search engines index the image correctly and improves its visibility in image searches. Using descriptive and relevant alternative text can enhance the SEO of your web page. <img src='image.jpg' alt='A group of people enjoying a picnic in the park'>",
        "code":""
    },
    {
        "id":12,
        "question":"What are the different types of lists in HTML?",
        "answer":"Ordered List (<ol>): An ordered list represents a list of items in a specific order or sequence. Each list item is marked with a number or another ordered marker. By default, the numbering starts from 1 and increases incrementally. Here's an example: <ol><li>First item</li> <li>Second item</li> <li>Third item</li></ol>   output :   1.First item  2.Second item  3.Third item .      Unordered List (<ul>): An unordered list represents a collection of items that are not necessarily in a specific order. Each list item is typically marked with a bullet point or another unordered marker. Here's an example: <ul> <li>Apple</li>  <li>Banana</li> <li>Orange</li> </ul>  output: *Apple *Banana *Orange.You can also customize the marker style using CSS or HTML attributes.Definition List (<dl>): A definition list is used to present a list of terms and their corresponding definitions. It consists of term-description pairs created using the <dt> (definition term) and <dd> (definition description) elements. Here's an example:<dl> <dt>HTML</dt> <dd>HyperText Markup Language</dd>  <dt>CSS</dt>  <dd>Cascading Style Sheets</dd> </dl> output: HTML *HyperText Markup Language CSS *Cascading Style Sheets",
        "code":""
    },
    {
        "id":13,
        "question":"How do you embed a video in HTML?",
        "answer":"To embed a video in HTML, you can use the <video> element along with the appropriate attributes.<video src='path/to/video.mp4' autoplay loop muted poster='path/to/poster.jpg' controls>play this video</video>. The <video> element is used to define a video player on the web page. The src attribute specifies the path or URL of the video file. Make sure to provide the correct file path or URL to your video file (e.g., 'path/to/video.mp4'). The controls attribute adds basic video controls to the player, such as play, pause, and volume controls. autoplay: The autoplay attribute automatically starts playing the video when the page loads. loop: The loop attribute makes the video play continuously in a loop. muted: The muted attribute starts the video with the audio muted.poster: The poster attribute specifies an image to be displayed as a placeholder before the video is played.Remember to provide multiple video formats (such as MP4, WebM, and Ogg) and use the <source> element within the <video> element to ensure cross-browser compatibility. This allows the browser to choose the appropriate video format based on its supported codecs.",
        "code":""
    },
    {
        "id":14,
        "question":"Explain the concept of HTML forms and their important attributes.",
        "answer":"HTML forms are a crucial component of web developement that allows users to input and submit data to a server.They provide a means for capturing user information ,conducting surveys ,accepting user feedback,and performing various interactive tasks on websites. the concept of HTML forms revolves around the <form> element and its related attributes.1.<form>: serves as the container for all form elements . it is used to define a section of a webpage that contains interactive input controls.2.<input>: element is the most commonly used form control.It provides various types of input fields,such as text fields, checkboxes,radio buttons, file uploads ,and more. The 'type' attribute determines the specific behavior of the input field.3.<select>:this element creates a dropdown menu or list from which users can choose options.it is often used for single or multiple selection menus.<option> elements are nested within select elements to define the available options.4.<textarea>:this element allows users to enter multi-line text.it provides a larger input area compared to a regular text field,enabling users to type longer message or comments.5.<button>:The <button> element is used to create clickable buttons within a form. It can trigger form submission or execute JavaScript functions when clicked. The type attribute of the <button> element determines its behavior (e.g., submit, reset, or button).6.<label>:This element associates a text label with a form element.it improves accessibility and user experience by providing a textual description or prompt for the associated input field. The for attribute of the label element specifies the ID of the associated input element.7.<fieldset> and <legend> : The <fieldset> element groups related form elements together,while the <legend> element provides a caption or title for the fieldset group.They help organize and visually group form controls,making it easier for users.",
        "code":""
    },
    {
        "id":15,
        "question":"What is the purpose of the CSS box model in HTML?",
        "answer":"The purpose of the CSS box model in HTML is to provide a structured way of controlling and manipulating the visual and spatial properties of elements on a web page.It enables developers to control the dimensions,spacing,and positioning of elements,ensuring proper layout and alignment like Padding,Margin,Border,Content"
    },
    {
        "id":16,
        "question":"How do you include external CSS stylesheets in HTML?",
        "answer":"To include external CSS stylesheets in HTML,you can use the <link> element with the rel and href attributes.<link rel='stylesheet' href='path/to/stylesheet.css'> inside head tag 1. <link>:this element is used to link external resources, such as CSS files, to an HTML document.2.rel: this attribute specifies the relationship between the HTML document and the linked resource. for CSS stylesheets.3.href: this attribute specifies the path or URL of the external CSS file.",
        "code":""
    },
    {
        "id":17,
        "question":"What is the role of the <table> element in HTML?",
        "answer":"The <table> element in HTML is used to create tabular data or to represent information in a structured grid-like format.It plays a vital role in organizing and displaying data in rows and columns.The <table> element serves as the container for all table-related elements.1.<thead>:heading related content inside it- like <tr> <th>Name</th> <tr/>.2.<tbody>: main body of table tag inside it <tr> <td>Niranjan</td> </tr>. "
    },
    {
        "id":18,
        "question":"What are the differences between the <div> and <iframe> tags?",
        "answer":"1.Purpose and Usage:The <div> tag is a generic container used to group and style HTML elements.t does not have any specific functionality or predefined behavior. It is primarily used for layout purposes, dividing the content into logical sections, and applying CSS styles or scripting to those sections. It is a versatile element and can be used for various purposes.<iframe>: The <iframe> tag is used to embed another HTML document or web page within the current document. It allows you to display external content from a different source or URL within a specific region of your web page. It is often used for embedding videos, maps, social media feeds, or other external content that can be interacted with independently. The <iframe> tag is specifically designed to load and display an external document or web page.The visual appearance and layout of an <iframe> are determined by the embedded document or web page itself. The styling of the content within the <iframe> is typically controlled by the external source and may not be directly modifiable from the parent document.",
        "code":"https://drive.google.com/file/d/1rOBFXrHM-w1ohBTSeyZtp8Va0jL0ghjn/view?usp=sharing"
    },
    {
        "id":19,
        "question":"How do you create a responsive design in HTML?",
        "answer":"Here are some key techniques and approaches for building responsive designs in HTML:1.Use Responsive Meta Tag:<meta name='viewport' content='width=device-width, initial-scale=1.0'> This meta tag sets the viewport width to the device width and scales the page to fit the screen.2.CSS Media Queries: Utilize CSS media queries to apply different styles based on the screen size or device characteristics. Media queries allow you to target specific screen widths and adjust the layout, font sizes, margins, or other CSS properties accordingly. Here's an example of a media query targeting screens with a maximum width of 768 pixels: @media (max-width: 768px) {/* CSS styles specific to small screens or mobile devices */}",
        "code":"https://drive.google.com/file/d/1iYlSMuerss9_yi3FxihW9NiD7f7GEAsA/view?usp=sharing"
    },
    {
        "id":20,
        "question":"Explain the concept of HTML5 and its new features.",
        "answer":"HTML5 is the latest version of the Hypertext Markup Language (HTML), which is the standard markup language for creating web pages and applications. It introduces new elements, attributes, and APIs (Application Programming Interfaces) that enhance the capabilities and functionality of web development. HTML5 focuses on improving the structure, multimedia support, and interactivity of web content. Here are some key concepts and new features of HTML5:Semantic Elements: HTML5 introduces a set of semantic elements that provide clearer and more meaningful structure to web documents. These include <header>, <nav>, <section>, <article>, <aside>, <footer>, and more. Semantic elements enhance accessibility, search engine optimization, and code readability.Multimedia Support: HTML5 offers built-in support for audio and video playback without the need for external plugins like Flash. The <audio> and <video> elements allow developers to embed and control media directly within web pages. Additionally, HTML5 provides APIs like MediaSource for dynamic streaming and Canvas for programmatically manipulating and rendering graphics and animations.Form Enhancements: HTML5 introduces new form input types and attributes to improve form handling. These include email, url, number, date, range, color, and more. The placeholder attribute allows for providing hint text within input fields, and the required attribute specifies that a field must be filled out before submitting the form.Drag and Drop: HTML5 enables drag-and-drop functionality, allowing users to interact with web content by dragging elements and dropping them in specific areas or targets. This feature is supported through the draggable attribute and JavaScript events like dragstart, dragend, dragover, and drop.Offline and Storage: HTML5 provides features for offline web applications and client-side storage. The localStorage and sessionStorage APIs allow storing data on the user's browser, persisting even after the browser is closed. The Application Cache enables offline access to web pages, reducing reliance on continuous internet connectivity.Geolocation: HTML5 includes the Geolocation API, which allows web applications to access the user's geographical location information. This enables location-based services and the development of location-aware web applications.Web Workers and WebSockets: HTML5 introduces Web Workers and WebSockets to facilitate multi-threaded and real-time communication. Web Workers allow for offloading intensive tasks to background threads, improving overall performance. WebSockets enable bidirectional communication between a client and a server, enabling real-time data transfer.",
        "code":""
    }
],
"day1html":[
    {
        "id":1,
        "question":"Briefly explain what HTML stands for and its purpose in web development.",
        "answer":"HTML stands for HtperTextMarkup Language. It is the standerd language used to create and design web pages. HTML is the basic building block of a web page and provides the structure and sementics for the content displayed on the internet.It uses markup,consisting of various elements and tags, to define the structure and layout of web page.These elements allow for the proper presentation of text, images ,links , forms, and other media on the web.HTML enables browsers to interpret and display content in a consistant and structured manner making it a fundamental technology for frontend developement. ",
        "code":""
    },
    {
        "id":2,
        "question":"Explain the basic structure of an HTML document.",
        "answer":"The basic structure of an HTML document consist selveral essential elements 1.<DOCTYPE html> : This decleration defines the document type and version of HTML being used. In modern HTML5 documents ,its common to see <!DOCTYPE html> to specify HTML5. 2.<html>: The <html> element is the root element that wraps all the content on the web page. 3.<head>: The <head> element contains meta information about the document, such as its title ,character encoding, links to stylesheets, and other metadata. 4.<title>: the <title> element is within the <head> section and defines the title of the web page , which appears in the browsers title bar or tab.  5.<body> : The <body> element contains the main content of the web page ,including headings,paragraph,images,links,and other elements. refer code to check basic html document.",
        "code":"https://drive.google.com/file/d/16vnA7yN5A7H_V1YUQR1scPiM2eExk0Y0/view?usp=sharing"
    },
    {
        "id":3,
        "question":"What is the purpose of the <html>, <head>, and <body> tags in HTML?",
        "answer":"1.<html> tag : The <html> tag is the root element of an HTML document. It encapsulates all the content that is part of the web page. this tag provides the structure for the entire HTML document, containing both the <head> and <body> section. 2.<head> tag : the <head> tag is a section within the HTML document that contains meta-information and resources related to the page like stylesheet link source. It includes elements like <title> which defines the title of the page , as well as links to stylesheets, scripts, and other meta tags for character encoding and viewport settings. It does not directly render content visible to users on the webpage. 3.<body> tag : The <body> tag defines the main content area of the HTML document that is displayed in the web browser. It encompasses all the visible elements such as headings , paragraphs, Images, links, forms, and other multimedia. The content within the <body> tag is what users see and interact with when viewing the web page. In summery the <html> tag defines the overall structure of the html document, the <head> tag contains metadata and resources related to the page, and the <body> tag encapsulates the visible content of the web page the users interact with.",
        "code":""
    },
    {
        "id":4,
        "question":"What does the <title> tag do in HTML?",
        "answer":"The <title> tag in HTML is used to define the title of the web page. It is placed within the <head> section of an HTML document and provides essential information about the page's content. The text specified within the <title> tag is displayed in the title bar of the web browser. This helps users identify the content or purpose of the webpage when multiple tabs are open.",
        "code":""
    },
    {
        "id":5,
        "question":"What is the use of heading tags(h1 to h6)?",
        "answer":"Headings tags in HTML are used to define headings or titles for sections of a webpage. They provide a way to structure and organize content, allowing both users and search engines to understand the heirarchy and importance of diffirent sections within the page. There are 6 levels of heading tags in HTML, ranging from the most important and highest level <h1> to the least important level ,<h6>.  <h1> : Represent the highest-level heading and typically used for the main title or heading of the entire page. <h2> to <h6> : represent lower-level headings , with decreasing importance as the number increases. They are used to subdivide sections of the content, where <h2> is a subsection of the content, where <h2> is the subsection of <h1>,<h3>. using heading tags helps in several ways: 1.Sementic structure : Heading tags provide a sementic structure to the document , making it more accessible and meaningful to assistive technologies and search engines. 2.Accessibility: Properly structured headings improve the accessibility of the web page, aiding users with screen readers or other assistive devices in navigating and understanding the content. 3.SEO(Search Engine Optimization): Search engines use heading tags to understand the content hierarchy and revelance. proper use of headings can positively impact the SEO of a webpage. 4.Readability: Heading tags enhance the readability of the content by breaking it into logical section and making it easier for readers to scan and understand the page's structure.",
        "code":""
    },
    {
        "id":6,
        "question":"Explain the <p> tag in HTML.",
        "answer":"The <p> tag in HTML stands for paragraph and is used to define a paragraph of text.It's one of the most common and fundamental HTML tags used to structure and format textual content on a webpage. when you enclose a block of text within a pair of <p> tags , the web browser will typically display that text with some space above and below, visually seprating it from other content.It's good practice to use <p> tag to wrap textual content for better readability and organization",
        "code":""
    },
    {
        "id":7,
        "question":"What is <a> tag is used for in HTML?",
        "answer":"The <a> tag in HTML , also known as the anchor tag is used to create hyperlinks or clickable text or images that lead to other web pages or resources, either within the same website or to external websites. It's fundamental element for navigation and interactivity on the web.",
        "code":""
    },
    {
        "id":8,
        "question":"Describe the <img> tag and its attributes?",
        "answer":"The <img> tag in HTML is used to embed(insert) images within a web page. Images are an essential component of web design, providing visual content and enhancing the user experience.The <img> tag is self-closing , meaning it dosent have closing tag. here are some important attributes associated with the <img> tag 1.src:(source) Specifies the URL or path of the image to be displayed. 2.alt:(Alternate text) Provides alternative text that is displayed if the image cannot be loaded or accessed. It is also crucial for accessibility and SEO. width:Specifies the width of the image in pixels or as a percentage of its container. height: Specifies the height of the image in pixels or as a percentage of a container.",
        "code":""
    },
    {
        "id":9,
        "question":"Explain the usage of the <ul> , <ol> , <li> tags in HTML?",
        "answer":"1.The <ul> tag in HTML is used to create an unordered list,which is a list of items presented in a bulleted format without any specific order or sequences Each item in the list is represented by the <li> tag. 2.<ol> : (Ordered list) the <ol> tag in HTML is used to create an ordered list, which is a list of items presented in a numbered or ordered format. 3.<li> The tag is used within both <ul> and <ol> elements to define each individual item in the list. It is a block-level element and is typically displayed as a bullet point in an unordered list or a number in an ordered list.",
        "code":""
    },
    {
        "id":10,
        "question":"What is the purpose of the <table> tag in HTML?",
        "answer":"The <table> tag in HTML is used to create a table, which is a way to organize and display data in a structured grid format. Tables are essential for presenting information in rows and columns, making it easier for users to understand and compare data. The main components associated with the <table> tag are : 1.<tr>Represents a row within the the table. 2.<td>: Represents a cell within a table row and contains the actual content or data. 3.<th>: Represents a table header cell , typically used to label columns or rows. The Content inside <th> is bold and centered by default.",
        "code":""
    },
    {
        "id":11,
        "question":"Describe the <form> tag in html?",
        "answer":"The <form> tag in HTML is used to create an interactive form on a web page. forms allow users to input data,such as text,numbers,selection which can be submitted to server for processing. forms are fundamental part of web developement,enabling various actons like user authentication,data submission,serach functionalities. The <form> tag encapsulates form elements like input fields,checkboxes,radio buttons,submit buttons, and more which is used to collect user input. key attributes associated with the <form> tag : 1.action : Specifies the URL or file path where the form data will be submitted for processing. 2.method: Defines the HTTP method to be used for submitting the form data.",
        "code":""
    },
    {
        "id":12,
        "question":"Explain the sementic elements and their importance.",
        "answer":"Semantic HTML elements are HTML elements that convey meaning or describe the content they contain , providing a clear structure and context for the content within a web page . these elements play a crucial role in improving the accessibility , maintainability and search engine optimization(SEO) of a website. here are some common semantic HTML elements and their significance 1. <header> : Represents the introductory content at the begining of a section or webpage containing headings,logos,navigation. importance: Provides a clear introduction and structure to the content. 2.<nav> : Represents a section of the page that contais navigation links,typically used to navigate within the current page or other pages.Imporatance: Clearly identifies and seprates navigation links for better user experience and accessibility. 3.<main>: Represents the main content area of the page containing the central content that is unique to that specific page. Importance: Helps assistive technologies and search engines understand the primary content of the page.  4.<section>: Represents a thematic grouping of content , typically containing related elements or topics.Importance: Enhances the organization and understanding of content within the webpage. 5.<article>: Represents a self contained , independent piece of content such as a blog post,article, or comment. 6.<aside>:Represent the content related to surrounding often displayed as a sidebar or callout. 7.<footer>: Represents the footer of a section or a webpage, usually containing information like copyright,contact details, or related links. Importance: Provides a clear conclusion to the content and often includes important details. Using semantic HTML elements helps convey the structure and meaning of a webpage to both humans and machines, making the content more accessible and understandable. It also contributes to improved SEO,as search engines can better interpret and index the content based on the semantics provided by these elements .Additionaly ,sementic HTML facilitates collaboration and maintainibility by clearly defining the purpose and structure of diffirent parts of the webpage.",
        "code":""
    },
    {
        "id":13,
        "question":"What is the main difference between <div> and <span> elements in HTML?",
        "answer":"<div> Element: The <div> (division) element is a block-level container used to group and organize various elements or content together, often for styling purposes or applying CSS. It creates a new block or box, typically starting on a new line and spanning the full width of its parent container. It's used to structure larger sections of a webpage and is often styled with CSS for layout purposes. It can contain other block-level and inline elements, including other <div> elements.<span> Element: The <span> element is an inline-level container used to apply styles or manipulate specific portions of text within a larger block of content. It doesn't create a new block or box and typically does not affect the layout of the content around it. It's useful for applying CSS styles, scripts, or making specific text selections for JavaScript actions. It can be used within a block-level element or inside other inline elements.Main Differences: <div> is a block-level element, while <span> is an inline-level element. <div> is used to create larger sections or blocks of content, often for layout and styling purposes, whereas <span> is used to style or target specific inline elements or portions of text within a larger content block. <div> is typically used for structural purposes and grouping larger content, while <span> is used for styling or applying styles to smaller, inline portions of content. In summary, <div> is primarily for layout and structural organization, creating block-level elements, while <span> is for inline styling or manipulation of smaller segments of text within a block-level or inline element.",
        "code":""
    },
    {
        "id":14,
        "question":"How would you create a hyperlink that opens in a new tab?",
        "answer":"To create a hyperlink that opens in a new tab or window , you can use the target attribute with the value _blank. this tells the browser to open the link in a new tab or window.",
        "code":""
    }
],
"day2html":[
    {
        "id":1,
        "question":"What is the purpose HTML forms in web developement?",
        "answer":"The purpose of HTML forms in web developement is to facilitate the collection,submission,and processing of user input on a web page.HTML forms provide a structured and organized way to gather various types of data, such as text,numbers,selections,and more,from users. for example:-1.User Interaction and Input 2.Data Collection 3.User Authentication and Authorization 4.Enabling Transactions 5.User Feedback and Communication 6.Search and Filtering 7.User Engagement and Interactivity.",
        "code":""
    },
    {
        "id":2,
        "question":"Describe the <form> element in HTML.",
        "answer":"The <form> element in HTMl is a fundamental building block used to create interaction on a web page.It serves as a container for various form elements,allowing users to input and submit data,which can then be processed by the web server or manupulated using client-side scripts using JavaScript.   1. The <form> element starts with the opening <form> tag and ends with the closing </form> tag.  2. The action attribute specifies specific URL. 3.The method attribute defines the HTTP method to be used for submitting the form data,commonly either GET or POST.4.Various form elements-a.text,number,password input b.checkboxes,radio buttons,text areas,select dropdowns.  5.a.form submission: when the user submits the form (by clicking a submit button),the data from the form elements is sent to the URL specified in the action attribute using the method specified in the method attribute.b.The form data can be accessed and processed by the server or client-side scripts."
    },
    {
        "id":3,
        "question":"Explain the various form inputs types in HTML.",
        "answer":"1. Text Input <input type='text' name='username' id='username> 2.Password Input <input type='password' name='password' id='password'> 3.Textarea <textarea name='message' id='message'></textarea> 4. Checkbox <input type='checkbox' name='subscribe' id='subscribe'> 5.Radio Buttons <input type='radio' name='gender' value='male' id='male'> Male </input>. 6.Number Input <input type='number' name='quantity' id='quantity' min='1' max='10'> 7.Email Input <input type='email' name='email' id='email'> 8.URL Input <input type='url' name='website' id='website'> 9.File Input <input type='file' name='file' id='file'> 10.Select Dropdown <select name='country' id='country'> <option value='us'> USA </option> <option value='Ind'>India</option> </select> ",
        "code":""
    },
    {
        "id":4,
        "question":"What is the purpose of the <input> element in HTML forms?",
        "answer":"The <input> element in HTML forms is a fundamental element used to create various types of input fields,allowing users to input data and interact with webpage.Its one of the most versatile and commonly used elements when building forms in HTML. The main purpose of the <inputr> elements are as follows 1.Data Input 2.User Interactions 3.Form Elements 4.Data Submission 5.User Authentication 6.Form controls.",
        "code":"https://drive.google.com/file/d/1X0p9JoVdJqDB4SysHs9ttgkIQd9tnXm8/view?usp=sharing"
    },
    {
        "id":5,
        "question":"Explain the <textarea> element in HTML",
        "answer":"The <textarea> element in HTML is used to create a multi-line text input field within a form, allowing users to enter larger amounts of text, such as comments,description,or messages. unlike single-line text input fields created with the <input> element <textarea> provides a more flexible and expandable area for users to input textual content. Syntax : <textarea name='myTextArea' id='myTextArea' rows='4' col='50'></textarea> name: provides name for the textarea, which is used when submitting the data. id: id attribute uniquely identifies the textarea, typically used for associating labels or styling through css.The rows attribute specifies the number of visible rows or lines of text that are initially displayed.col: The cols attribute defines the number of visible columns or characters per line. users can enter multiple lines of text within the textarea, and they can use the ENTER or return key to create line breaks.Placeholder text:this attribute is used to display text as hint to users, providing guidance or examples of the expected input.",
        "code":""
    },
    {
        "id":6,
        "question":"What are the radio buttons and checkboxes in HTML forms?",
        "answer":"Radio buttons and checkboxes are input elements in HTML forms used to provide options for users to make selections.they are exssential for creating interactive and user-friendly forms.1.Radio buttons are used when you want users to select one option from a group of options.2.Each radio button typically represents a choice,and only one radio button from a group can be selected at a time.",
        "code":"https://drive.google.com/drive/folders/1rAPJr75EAswbNA_mpiNezwj62FV0CwbH?usp=sharing"
    },
    {
        "id":7,
        "question":"Explain hoe HTML form validation works and its purpose in ensuring data correctness before submission.",
        "answer":"Form validation in HTML refers to the process of checking user-inputted data against specified rules or constraints before allowing it to be submitted. The purpose of form validation is to ensure that te data entered by the user is accurate,properly formatted,and meets certain criteria,preventing invalid or potentially harmful data from being sent to the server. Key Aspects: 1.Client-Side Validation a.HTML provides built-in client side validation using attributes(special words which provides additional information of element) and elements that help validate user inputs without requiring a server round trip. common validation attributes include required,min,max,typ,etc. b.Error Messages:HTML5 allows you to display error messages using the title attribute or the span element inside the form,informing users about required input or input format.c.Preventing Submissions: When using validation attributes, if a field fails validation, the form submission is blocked and an error message is displayed.users are prompted to correct the errors before they can submit the form. d.JavaScript Validation: More Complex validation requirements can be implimented using JavaScript.Event listeners (eg.onsubmit,onchange) can be used to trigger validation functions.e.Server-Side Validation: Server side validation is crucial for security and data integrity. Overall Purpose: Ensure that data submitted to the server in in the expected format and meets certain criteria.Improve user experience by providing real time feedback to users about their input.Reduce the load on the server by avoiding unnecessary submissions of incorrect data.  ",
        "code":""
    },
    {
        "id":8,
        "question":"Explain the required attribute in HTML form elements.",
        "answer":"The required attribute in HTML is used to mark a form element as mandatory,indicating that the user must fill in the associated input field before the form can be submitted. It's a simple and effective way to impliment client-side form validation and ensure that essential information is provided by the user. eg.<input type='text' id='user' name='user' required>",
        "code":""
    },
    {
        "id":9,
        "question":"How can you set default values in form fields in HTML?",
        "answer":"You can use value attribute for various form elements. The value attribute allows you to define an initial or default value that will be displayed in the form field when the page is loaded.users can then modify or accept this default value based on their requirements.",
        "code":""
    },
    {
        "id":10,
        "question":"Describe the HTML <button> element and its types.",
        "answer":"The HTML button element is used to create a clickable button on a webpage , which can trigger an action when clicked by the user.Buttons are a fundamental part of web forms and user interface design,allowing users to perform actions or submit data in an interactive and intuitive manner.1.Basic button : <button>Click me </button> 2.Submit Button : <button type='submit'>Submit</button> 3.Reset Button : The Reset button is used within a <form> element to reset all the form fields to their initial/default values.It clears the form and sets it back to its initial state . <button type='reset'>Reset</button> 4. Button with Custom JavaScript Behavior : <button onClick='fun()'>Click Me</button> 5.Disabled Button : <button disabled>Disabled Button</button>",
        "code":""
    },
    {
        "id":11,
        "question":"Describe the process and significance of submitting form data.",
        "answer":"Process of Submitting Form Data: 1.User Interaction: User interact with a web page by filling out input fields within a form eg.text boxes,checkboxes,radio buttons ,dropdowns and then clicking a submit button. 2.Form Submission: When the user clicks the submit button browser collects all the data entered in the form,organize it into key value pairs ,and prepares to send this data to the server.3.HTTP Request: The browser sends an HTTP request to the server containing the form data as part of the request payload or url parameters,depending on the form submission method.  4.Data Transmission : The form data is transmitted to the server,either throughthe request body or appended to the URL.Server Side Processing : The server recieves the request and processes the form data. This may involve storing the datain the database ,performing calculations,authenticating the user,or any other server-side operations based on the application's logic. 6.Response generation : The server generates a response based on the processing which might be HTML content for a new page ,JSON data,an error message,or any other suitable response format. 7.Browser Rendering : The Browser recieves the response and renders the content to the user based on the response type.For HTML responses,it displays a new page or updates the existing page with the returned content. ",
        "code":""
    },
    {
        "id":12,
        "question":"What is the role of the action attribute in the form element?",
        "answer":"The action attribute in the form element specifies the URL or endpoint where the form data is to be submitted when the user clicks the submit button.It defines the server-side script or resource that will process the form data and generate a response based on the submission. 1.Specifying the Submission Endpoint : The action attribute defines the URL or endpoint where the form data will be sent when the form is submitted. This URL could point to a server-side script, a server route,or a specific endpoint. 2.Server-Side Processing: When The form is submitted ,The browser sends an HTTP request to URL specified in the action attribute.The server-side script or handler at that URL,processes the form data,performs necessary actions eg.storing data in a database,sending an email,and generates a response.3.Form Data Submission:The action attribute determines how the form data is transmitted to the server. It depends on the form's 'method' attribute . If 'method'='get',the form data is appended to the URL as query parameters, making it visible in the URL.if the 'method'='post',the form data is sent in the requested body ,making it not visible in the URL.4.Handling Form Submission: The action attribute , in conjunction with the 'method' attribute ,plays a critical role in defining how the form submission is handled and where the submitted data is processed.The server-side script specified in the 'action' attribute processes the submitted form data according to the application's logic. eg. <form action='/submitForm' method='post'>Form fields here<button type='submit'>Submit</button> </form>",
        "code":""
    }

],
"day3html":[],
"day4html":[],
"day5html":[],
"day6html":[],
"day7html":[],

"top20css":[
 {
    "id":1,
    "question":"What is the Box model in CSS? Which CSS properties are a part of it?",
    "answer":"A rectangle box is wrapped around every html element.The box model is used to determine the height and width of rectangular box.The CSS Box consists of width and height (or in the absence of that, default values and the content inside), padding, borders, margin. Content: Actual Content of the box where the text or image is placed. Padding: Are around the content(space between the border and content). Border:Area surrounding the padding. Margin:Area surrounding the border.",
    "code":""
 },
 {
    "id":2,
    "question":"Name all the modules which are used in the current version of CSS.",
    "answer":"Selectors,Box Model,Backgrounds and Borders,Text Effects,2D/3D Transformaions,Animations,Multiple Column Layout,User Interface.",
    "code":""
 },
 {
    "id":3,
    "question":"Write all the properties of the flexbox.",
    "code":"There are several properties of the flexbox that are used in the HTML webpage.1.flex-direction: row - all items aligned in one line;flex-direction: row-reverse - items are aligned in reverse order where last element comes first and first comes last; flex-direction: column - items align in column ; flex-direction: column-reverse - items align in reverse order and column direction. 2.flex-wrap:wrap -The flex items break into multiple lines. flex-wrap:nowrap- here The flex items are laid out in a single line which may cause the flex container to overflow.This is the default value.flex-wrap: wrap-reverse- Behaves the same as wrap but cross-start and cross-end are permuted (reverse order). Global values of flex-wrap :- 1.inherit; 2.initial; 3.revert; 4.revert-layer; 5.unset; 3.flex-flow: row wrap; items wrap in row wise direction. flex-flow: row-reverse nowrap; items align in one row only.flex-flow: column wrap;- Items wrap in column direction one by one. flex-flow: column wrap-reverse; Items wrap in column direction one by one but in reverse order. 4.justify-content:start; Pack items from the start justify-content: center;-Pack items around the center.justify-content: end;Pack items from the end.justify-content: flex-start; Pack flex items from the start.justify-content: flex-end;Pack flex items from the end.justify-content: left; Pack items from the left. justify-content: right; Pack items from the right. justify-content:space-between;-  Distribute items evenly The first item is flush with the start,the last is flush with the end. justify-content: space-around; Distribute items evenly Start and end gaps are half the size of the space. justify-content: space-evenly; Distribute items evenly Start, in-between, and end gaps have equal sizes. justify-content: stretch; Distribute items evenly Stretch 'auto'-sized items to fit the container. justify-content: safe center;If the item overflows the alignment container, then the item is aligned as if the alignment mode is start. The desired alignment will not be implemented.5.align-items: start;- Pack items from the start.align-items: center;- Pack items around the center.align-items: end;- Pack items from the end.align-items: stretch;Flex items are stretched such that the cross-size of the item's margin box is the same as the line while respecting width and height constraints.6.align-content:start;-Pack items from the start.align-content: center;Pack items around the center.align-content: end;-Pack items from the end.align-content: space-between;-The spacing between each pair of adjacent items is the same.align-content: space-around;-The empty space before the first and after the last item equals half of the space between each pair of adjacent items."
 },
 {
    "id":4,
    "question":"What is the difference between padding and margin?",
    "answer":"In CSS, rhe margin property by which we can create space around elements.like margin-top,left,bottom,right also margin property has some defined values like Auto : Using this property browser calculates the margin , length: it sets the margin values in px,pt,cm etc. , % : it sets the width % of the element.Inherit: By this property we can inherit the margin property from the parent element. Padding: In CSS ,padding is the property by which we can generate space around an elements content as well as inside any known border.like Padding-top,right,bottom,left.Negative values are not allowed in Padding",
    "code":""
 },
 {
    "id":5,
    "question":"What are the pseudo classes and what are they used for?",
    "answer":"Pseudo classes are similar to pseudo elements,but instead of styling a part of an element,they apply styles when an element is in a certain state.For example,you could style a button diffirently based on whether the user has their mouse pointer over it,or when click the button.you can also use when you want to style only certain occurance of elements in a row eg. styling the first tab in a series of tabs. .link:hover { ... },.link:active { ... },.tab:first-child { ... },.tab:last-child { ... },.avatar:nth-child(2n) { ... }",
    "code":"https://drive.google.com/file/d/1souMy9ZeLZ-nkjipxmI30n_60nFiNmaP/view?usp=sharing"
 },
 {
    "id":6,
    "question":"Should you use !important?",
    "answer":"The use of '!important' in CSS should generally be acoided it is considered a last resort option for overriding styles and can lead to specificity and maintainability issues in your code.here are a few reasons why it is generally not recommended to use '!important': 1.Spacificity conflicts: '!important' override styles regardless of their specificity(Specificity is a set of rules used in CSS to determine which styles should be applied to an element when multiple conflicting styles are targeting it.),which can make it difficult to maintain and update your stylesheet.It can lead to unexpected behavior when trying to override or update styles later on.2.Code maintainability:When '!important' is used extensively,it becomes harder to understand and manage the cascading order of styles.it can make your codebase more complex and harder to maintain.3.Debugging difficulties:When troubleshooting styling issues,'!important' can make it more challenging to identify and fix conflicts.It can create a situation where you are forced to add even more !important declarations to override previous ones." 
 }
],
"day1css":[],
"day2css":[],
"day3css":[],
"day4css":[],
"day5css":[],
"day6css":[],
"day7css":[],

"day1mongo":[],
"day2mongo":[],
"day3mongo":[],
"day4mongo":[],
"day5mongo":[],
"day6mongo":[],
"day7mongo":[],


"top20Node":[
    {
        "id":1,
        "question":"What is Node.js? How does it differ from other server-side frameworks?",
        "answer":"Node.js is an open-source,cross-platform runtime enviornment that allows developers to build server-side- and networking applications using javascript.it differs from other server-side frameworks in that it uses event-driven,non-blocking I/O model,which makes it lightweight and efficient for handling concurrent requests.Traditionaly,JavaScript was primarily used for client-side scripting within web browsers.However,Node.js enables JavaScript to be executed on the server-side,allowing developers to build scalable and high-performance applications that can handle a large number of simultanious connections.Node.js utilizes the V8 JavaScript engine,the same engine used by google chrome , which provides high-speed execution of code in Js.It also  has a vast ecosystem of modules and packages available through the Node Package Manager,allowing developers to easily incorporate existing solutions into their applications.Overall,Node.js provides a streamlined and unified JavaScript enviorement for both client and server-side developement,making it popular choice for building web applications, API's, real-time applications, and microservices.",
        "code":""
    },
    {
        "id":2,
        "question":"What is NPM and what is its role in Node.js?",
        "answer":"NPM stands for Node Package Manager and it plays a crucial role in the Node.js ecosystem.It is a command-line tool that comes bundled with Node.js and allows developers to easily manage dependencies,pakage distribution,project management Here are some key points about NPM: 1.Dependency Management: NPM helps in managing the dependencies of a Node.js project.It allows developers to specify the required packages and their versions in a package.json file.NPM then resolves and installs these dependencies,ensuring that the project has access to the required modules. Package Distribution : NPM serves a central repository for sharing and discovering packages.It provides a platform for developers to publish their own packages and make them available for others to use. This enables easy code reuse and accelrates developement by leveraging existing solutions.3Command-Line Interface: NPM offers a command-line interface that allows developers to execute various operations such as installing packages,updating dependencies,running scripts,and more.It provides a rich set of commands and options to efficiently manages and interact with the packages within a project.SCripts and lifecycle hooks: NPM allows developers to define custom scripts in the package .json.these scripts can be executed using npm run command, making it convinient to define and automate various project-related tasks.NPM also provides lifecycle hooks that run at specific stages during package installation,such as pre-install,post-install,pre-publish.5.Versioning and Semver:NPM follows semantic versioning(semver)conventions,which provide a standerdized way of specifying and managing package versions.Semver helps ensure compatibility and allows developers to define version ranges to handle updates and dependencies accurately.In addition to these three main list types, you can also create nested or nested ordered lists and nested unordered lists. This allows you to create sub-levels of list items within a parent list item.",
        "code":""
    },
    {
        "id":3,
        "question":"What are the core modules in Node.js?",
        "answer":"Node.js provides several core modules that are available for use without requiring any external dependencies. These modules are built-in and can be accessed using the require function. Some of the core modules in Node.js are:fs(file system):This module provides methodes foer interacting with the file system,allowing you to read,write,manipulate files and directories.2.http and https: These modules enables you to create HTTP and HTTPS servers and make HTTP/HTTPS requests.They provide functions for handeling server-side logic ,routing,and interacting with web clients.path:The PAth modules provides utilities for working file paths.It allows you to manipulate and resolve file paths,extracted file extentions,and handle platform -specific path differences "
    }
],
"day1node":[
     {
        "id":1,
        "question":"What is Node.js, and what are its key features?",
        "answer":""
       ,"code":"" 
    }

],
"array":[
    {
       "id":1,
       "question":"Searching in an array-Linear search(given an array of N elements , your task is to write a function to search a given element X in array",
       "answer":"https://drive.google.com/file/d/1a47LM3zeMXO17MB33wP5JUybvj9Ndk0M/view?usp=sharing",
       "time_complexity":"O(n) function iterates only once through an array",
       "space_complexity":"O(1) not any extra element/array is used",
       "advantages":"1.Simple to implement ,easy to understand. 2.it can be used on arrays of any datatype. 3.Does not require any additional memory",
       "drawback":"It has time complexity O(n) ,which in turns makes it slow for large datasets. 2.Not suitable for large array",
       "usecase":"1.When we are dealing with a small datasets. 2.when you need to find an exact value. 3.when you are searching a dataset in contiguous memory"
    },
    {
        "id":2,
        "question":"Searching the element in an array using Binary Search technique.",
        "answer":"https://drive.google.com/file/d/1WB85sOQDzIvacvwDhJqkf4Oj-lhtrUGj/view?usp=sharing",
        "time_complexity":"O(log n)number of iterations required to find the target element is proportional to the logarithm of the size of the input array",
        "space_complexity":"O(1), which means it requires a constant amount of memory regardless of the input size.",
        "advantages":"The time complexity of the search function is O(log n), which is very efficient for large arrays.It works well with sorted arrays, as it first sorts the array and then searches for the element.It is a simple and easy-to-understand implementation.",
        "drawback":"It requires the array to be sorted, which may not always be feasible or desirable.It uses recursion, which can be less efficient in terms of memory usage and performance compared to an iterative implementation.",
        "usecase":", if you have a large dataset of customer information sorted by customer ID, and you need to quickly find the information for a specific customer, you could use binary search to efficiently locate the relevant record."
    },
    {
        "id":3,
        "question":"Reverse an array by replacing elements from both sides.",
        "answer":"https://drive.google.com/file/d/1kvOfa7D-v0xi9UqzrV12QXM9X8Cjl0WD/view?usp=sharing",
        "time_complexity":"O(n)",
        "space_complexity":"O(1)The only extra space used is for the temporary variable 'temp', which requires constant space. The algorithm operates in-place, modifying the input array, and does not create any additional data structures.",
        "advantages":"Time complexity: The time complexity of this method is O(n/2) or O(n) since it iterates through half of the array elements. This makes it more efficient than other methods that have a time complexity of O(n^2).Space complexity: The space complexity of this method is O(1) since it does not require any extra space to perform the reversal. This makes it more memory-efficient than other methods that require additional memory to store temporary variables.",
        "drawback":"Modification of original array: This method modifies the original array, which may not be desirable in some cases. If you need to keep the original array intact, you would have to create a copy of it before applying this method.Not suitable for linked lists: This method works only for arrays, and cannot be used for reversing linked lists or other non-array data structures.",
        "usecase":"The method of using a loop to reverse an array in-place is a good choice when you want to minimize the space complexity of your code. Since it operates on the existing array, it avoids the need to create a new array to hold the reversed elements. This can be especially useful when working with very large arrays or in situations where memory is limited."
    },
    {
        "id":4,
        "question":"Reverse an array recursively.",
        "answer":"https://drive.google.com/file/d/1-ggDCS-nUHItvks8fGAxlwXTpzbZ_5kd/view?usp=sharing",
        "time_complexity":"O(n)",
        "space_complexity":"O(1)",
        "advantages":"One advantage of using this recursive method to reverse an array is that it reduces the space complexity as it does not use any additional space.",
        "drawback":"it may not be as efficient for very large arrays due to the added overhead of the function calls. Additionally, it may not be as easy to read and understand compared to a simple iterative approach.",
        "usecase":"This method of array reversal can be useful in situations where the input array is large and space complexity is a concern, as it has a space complexity of O(1) (constant space). It can also be useful when a recursive approach is preferred over an iterative approach."
    },
    {
        "id":5,
        "question":"Program for array left rotation by d positions",
        "answer":"https://drive.google.com/file/d/1TfVUyDET-atmswPLrlHHHzJ0S1PbGpfe/view?usp=sharing",
        "time_complexity":"O(n): function is iterating through array 2 times",
        "space_complexity":"O(n):function is creating new array of size n",
        "advantages":"It has a time complexity of O(n), which is optimal for rotating an array by a fixed number of positions.It uses an additional array to store the rotated elements, which can be useful if the original array needs to be preserved.It is easy to understand and implement, making it a good choice for simple applications.",
        "drawback":"Additional space requirement: This method requires creating a temporary array to hold the rotated values. If the array is large, this can result in a significant increase in memory usage.Extra loop iterations: In this method, two loops are used to iterate through the array - one for copying the right part of the array to the temporary array and another for copying the left part of the array to the temporary array. This can lead to extra loop iterations compared to some other methods, which can impact performance.",
        "usecase":"One real-life use case for this method of rotating an array is in cryptography. In cryptography, it is common to use permutations of arrays as keys to encrypt and decrypt messages. By rotating an array, a new permutation can be generated, which can then be used as a new key. This helps increase the security of the encryption by making it harder for attackers to guess the key and decipher the message."
    },
    {
        "id":6,
        "question":"Program for array left rotation by d positions Approach-2",
        "answer":"https://drive.google.com/file/d/1b388SPJNELbvzqK5LVxHOXu_814-SapI/view?usp=sharing",
        "time_complexity":"O(n*d) rotating d times",
        "space_complexity":"O(1) modifying original array not creating new one",
        "advantages":"This method does not require any additional memory space. It is a simple and straightforward algorithm to rotate an array. It has a time complexity of O(n*d), where n is the size of the array and d is the number of rotations, which is relatively efficient.",
        "drawback":"The time complexity of this algorithm is not optimal, as it requires multiple shifts for each rotation.",
        "usecase":"rotating shifts for employees, where the order of shifts needs to be rearranged periodically to ensure that everyone has equal opportunity to work different shifts."
    },
    {
        "id":7,
        "question":"Program for array right rotation by K times",
        "answer":"https://drive.google.com/file/d/1AR7vpw3AOHreozQ5EmWt1hLs_8Pz4uQV/view?usp=sharing",
        "time_complexity":"O(n*d)",
        "space_complexity":"O(1)",
        "advantages":"Does not require extra space, the array is modified in place.",
        "drawback":"Time complexity is O(n*d), where n is the size of the array and d is the number of elements to rotate. This may not be efficient for large arrays or a large number of rotations.It may not be suitable for some use cases where the original order of the elements needs to be preserved.",
        "usecase":"in a playlist application where a user wants to shuffle the songs in their playlist. The application can use the rotate array method to randomly select a starting point in the playlist, and then rotate the array to move that starting point to the beginning of the playlist. This effectively shuffles the songs in the playlist without losing any of them."
    },
    {
        "id":8,
        "question":"Searching element in an array.",
        "answer":"https://drive.google.com/file/d/1hTlazqMPFUe91R6tEa5xOtCCyZMZtDun/view?usp=sharing",
        "time_complexity":"O(n) because function is iterating through array once",
        "space_complexity":"O(1) time required to perform the check for each element",
        "advantages":"Simple and easy to understand.Works well for small arrays or when the position of the element to be searched is known.",
        "drawback":"Inefficient for large arrays as it iterates through all elements.Not suitable for searching multiple occurrences of the same element.",
        "usecase":" checking if a certain username already exists in a list of usernames"
    },
    {
        "id":9,
        "question":"find common elements in two sorted arrays 1.in ascending order 2.in descending array",
        "answer":"https://drive.google.com/file/d/1lbh_rpeP81AW4IYFWcZQjj7dNDYYmr8Y/view?usp=sharing",
        "time_complexity":"The time complexity of the given code is O(N), where N is the length of the input arrays arr1 and arr2. This is because the code iterates through the arrays once, comparing elements at corresponding indices, and performs a constant-time operation for each comparison.",
        "space_complexity":"The space complexity of the code is O(1) because it uses a fixed amount of additional space to store the variables left, right, and count. The space required does not depend on the size of the input arrays."
    }
],
"stack":[
    {
     "id":1,
     "question":"Create constructor function for stack.",
     "answer":"https://drive.google.com/drive/folders/1y8HuitsUuBuGcyObArOxTeIhrS3YtipD?usp=sharing",
     "time_complexity":"",
     "space_complexity":"",
     "advantages":"Encapsulation: By using a constructor function, you can encapsulate the implementation of the stack within the function, making it easier to manage and maintain.Reusability: Once you have defined a constructor function for a stack, you can create as many instances of the stack as you need, without having to repeat the same code.Customizability: Since the constructor function is a template for creating objects, you can easily customize the behavior of the stack by adding or removing methods or properties.Readability: Using a constructor function with well-named methods can make the code more readable and easier to understand.Error handling: You can include error handling code within the constructor function to ensure that the stack is used correctly and to prevent errors from occurring.",
     "drawback":"Memory management: In some cases, using a constructor function for a stack can lead to memory leaks or inefficient memory usage. For example, if the stack is used to store large or complex objects, the memory used by those objects may not be released when they are popped off the stack, leading to wasted memory.",
     "usecase":"Stacks are useful when we need to keep track of the order of elements and need to access the most recently added element first. Use : Browser history: When we navigate through a website, the pages we visit are pushed onto a stack. When we hit the back button, we pop off the most recent page and navigate back to the previous page." 
    },
    {
        "id":2,
        "question":"Nearest smaller element to right",
        "answer":"https://drive.google.com/file/d/1B7RrLOmFz1OL2RQk_tok4bEW8q67Gb3w/view?usp=sharing",
        "time_complexity":"O(n) because it iterates through the input array once, performing constant time operations for each element.",
        "space_complexity":"The space complexity of this code is O(n) because it creates a new array of the same size as the input array to store the results, and a stack to store the intermediate values. However, the size of the stack at any given time will not exceed the length of the input array, so the space complexity is still O(n).",
        "advantages":"The Stack data structure provides constant time complexity (O(1)) for insertion (push), removal (pop), and peeking (peek) operations.",
        "drawback":"The Stack data structure has a high potential for stack overflow errors if too many items are pushed onto the stack, resulting in a runtime error.",
        "usecase":"When there is a need to maintain a Last-In-First-Out (LIFO) order of data, Stack can be used. the stack data structure is commonly used is in web browser history. When you visit a new web page, the URL is added to the stack. If you click the back button, the previous URL is popped from the stack and displayed. If you then click the forward button, the URL is pushed back onto the stack and the corresponding web page is displayed."
    },
    {
        "id":3,
        "question":"Nearest smaller element to left",
        "answer":"https://drive.google.com/file/d/1R0sUmaMb5F3DnDrUpXd1wdoMDNjFyl46/view?usp=sharing",
        "time_complexity":"O(n)",
        "space_complexity":"O(n)",
        "advantages":"",
        "drawback":"",
        "usecase":""
    },
    {
        "id":4,
        "question":"Nearest greater element to right",
        "answer":"https://drive.google.com/file/d/1a45I8elo4KEOHAAY-hI908mOytfCNXXy/view?usp=sharing",
        "time_complexity":"O(n)",
        "space_complexity":"O(n)",
        "advantages":"",
        "drawback":"",
        "usecase":"The use case for this code could be in a variety of scenarios, such as financial analysis, where you want to find the next highest stock price or index value. It could also be useful in weather forecasting, where you want to find the next highest temperature or pressure value. In general, the NGE algorithm can be useful in any situation where you need to find the next highest or lowest value in a series of data."
    },
    {
        "id":5,
        "question":"Nearest greater element to left",
        "answer":"https://drive.google.com/file/d/1zShzgBXIykfPY-Ijtx8g7IDovjZINxkN/view?usp=sharing",
        "time_complexity":"O(n)",
        "space_complexity":"O(n)",
        "advantages":"",
        "drawback":"",
        "usecase":""
    },
    {
        "id":6,
        "question":"Reduce string",
        "answer":"https://drive.google.com/file/d/12eCyBK9STKaDxXDDY9Nls4XkKcxexyRX/view?usp=sharing",
        "time_complexity":"O(n)",
        "space_complexity":"O(n)",
        "advantages":"Simplicity: The method uses a straightforward approach of iterating through the string and comparing adjacent characters. It doesn't require complex data structures or algorithms.Time Efficiency: The method has a time complexity of O(n), where n is the length of the input string. It achieves this by iterating through the string once and performing constant-time operations for each character. This makes it efficient for handling strings of various lengths. Space Efficiency: The method utilizes an array to store the resulting string without adjacent duplicates. It only stores the necessary characters, avoiding the need for excessive memory allocation. The space complexity is also O(n), where n is the length of the input string.",
        "drawback":"One potential drawback of the given method is that it only removes adjacent duplicate characters. If there are non-adjacent duplicate characters in the string, they will not be removed. For example, in the string abccba, the method will output abba instead of aba because the duplicate 'c' characters are not adjacent.",
        "usecase":""
    },
    {
        "id":7,
        "question":"String cut",
        "answer":"https://drive.google.com/file/d/1h8eVqgSu7pGEHT4N1R_VrlmpDwQZ4xce/view?usp=sharing",
        "time_complexity":"O(n)",
        "space_complexity":"O(n)",
        "advantages":"Flexibility: The code handles both even and odd lengths of the input string and adjusts the rearrangement accordingly. Modularity: The code is divided into a function, allowing for reusability and easy maintenance. Readability: The code uses clear variable names and comments, making it relatively easy to understand the logic.",
        "drawback":"",
        "usecase":"if you want to change format of name."
    },
    {
        "id":8,
        "question":"Alan and Christopher",
        "answer":"https://drive.google.com/file/d/15cA4adXtS3U2h6dOwb_3yCdfA2utnA0K/view?usp=sharing",
        "time_complexity":"O(n)",
        "space_complexity":"O(n)",
        "advantages":"",
        "drawback":"",
        "usecase":""
    },
    {
        "id":9,
        "question":"Smaller neighbour element to left without using constructor",
        "answer":"https://drive.google.com/file/d/1sBqvcgLVgZOANRhPB2DwNAR_-XgF7eEe/view?usp=sharing",
        "time_complexity":"O(n)",
        "space_complexity":"O(n)",
        "advantages":"",
        "drawback":"",
        "usecase":""
    },
    {
        "id":10,
        "question":"Smaller neighbour element to right without using constructor",
        "answer":"https://drive.google.com/file/d/1OhVKqiHEzsz_UqyksZaIM3m2k9_LhuzO/view?usp=sharing",
        "time_complexity":"O(n)",
        "space_complexity":"O(n)",
        "advantages":"",
        "drawback":"",
        "usecase":""
    },
    {
        "id":11,
        "question":"Find next greater element",
        "answer":"https://drive.google.com/file/d/1xMfZwS3OwdKWdvTKmxMYmH9gmqzLdLX5/view?usp=sharing",
        "time_complexity":"The time complexity of the given code is O(N), where N is the number of elements in the array arr. The code iterates over each element in the array exactly once, performing constant-time operations for each element. Therefore, the time complexity is linear with respect to the size of the input.",
        "space_complexity":"The space complexity of the code is O(N). The code utilizes a stack data structure (s) to store elements, and the size of the stack can grow up to N elements in the worst case, depending on the input array. Additionally, the result array is used to store the intermediate results, which also takes up O(N) space. Overall, the space complexity is O(N).",
        "advantages":" the use of a stack in the given code offers advantages such as efficient LIFO operations, simplified algorithm design, space efficiency, support for intermediate results, and a clear code structure.",
        "drawback":"",
        "usecase":""
    }
],
"queue":[

],
"linkedlist":[
    {
         "id":1,
        "question":"Insert a node at the head",
        "answer":"",
        "time_complexity":"",
        "space_complexity":"",
        "advantages":"",
        "drawback":"",
        "usecase":""
    }
],
"facilities":[

],
"bookings":[],

"jobs": [
      {
        "id":15,
        "job_title": "Software Engineer",
        "tech_stack": ["Java", "Spring", "Hibernate", "React"],
        "experience": "3-5 years",
        "company_name": "TechCorp India",
        "location": "Bengaluru, Karnataka",
        "salary": "₹8,00,000 - ₹12,00,000",
        "description": "TechCorp India is seeking a skilled Software Engineer to join our team. In this role, you'll work on cutting-edge projects, utilizing technologies like Java, Spring, Hibernate, and React. You'll collaborate with a talented team to design and implement software solutions that meet the needs of our clients and enhance user experiences.",
        "logo_url": "https://media.istockphoto.com/id/1431603444/photo/software-developer-at-the-office.webp?b=1&s=612x612&w=0&k=20&c=2hha2dG9QMzoVu7F4_j0ckyf6ci7JnGSs1karfBbgHg="
      },
      {
        "id":14,
        "job_title": "Data Analyst",
        "tech_stack": ["Python", "SQL", "Tableau"],
        "experience": "2-4 years",
        "company_name": "DataTech India",
        "location": "Mumbai, Maharashtra",
        "salary": "₹6,00,000 - ₹8,00,000",
        "description": "DataTech India is looking for a talented Data Analyst. As a Data Analyst, you will be responsible for analyzing and interpreting complex data sets to provide valuable insights to our clients. You'll work with a diverse team using tools such as Python, SQL, and Tableau to uncover patterns, trends, and opportunities for optimization.",
        "logo_url": "https://media.istockphoto.com/id/1408255024/photo/developers-discussing-programming-code.webp?b=1&s=612x612&w=0&k=20&c=dW_gC3uh5Q3GyVGc-4ZY3BBDsr40V6SsnJAUp28uf-c="
      },
      {
        "id":1,
        "job_title": "UX/UI Designer",
        "tech_stack": ["Figma", "Sketch", "Adobe XD", "HTML/CSS"],
        "experience": "3-6 years",
        "company_name": "DesignSolutions India",
        "location": "New Delhi, Delhi",
        "salary": "₹7,00,000 - ₹9,00,000",
        "description": "DesignSolutions India is in search of a creative UX/UI Designer. As a Designer, you will be responsible for crafting exceptional user experiences and intuitive interfaces. You'll use tools like Figma, Sketch, Adobe XD, HTML, and CSS to design and prototype engaging and user-friendly applications, contributing to the success of our projects.",
        "logo_url": "https://media.istockphoto.com/id/1401460590/photo/businessman-working-on-laptop-with-document-management-icon.webp?b=1&s=612x612&w=0&k=20&c=p2tYxuQPPuesnEj6My_dQ31bR3BQn49vvJ2IninnJZo="
      },
      {
        "id":2,
        "job_title": "Full Stack Developer",
        "tech_stack": ["JavaScript", "Node.js", "React", "MongoDB"],
        "experience": "4-7 years",
        "company_name": "CodeCrafters",
        "location": "Hyderabad, Telangana",
        "salary": "₹10,00,000 - ₹15,00,000",
        "description": "Join CodeCrafters as a Full Stack Developer and be part of our innovative team. You will work with cutting-edge technologies such as JavaScript, Node.js, React, and MongoDB to develop and maintain robust web applications. Your role will involve collaborating with both front-end and back-end teams to deliver seamless user experiences.",
        "logo_url": "https://cdn.pixabay.com/photo/2015/10/30/10/03/app-1013616_640.jpg"
      },
      {
        "id":3,
        "job_title": "Digital Marketing Specialist",
        "tech_stack": ["SEO", "SEM", "Google Analytics", "Social Media Marketing"],
        "experience": "3-5 years",
        "company_name": "DigitalMarketingExperts",
        "location": "Mumbai, Maharashtra",
        "salary": "₹7,00,000 - ₹10,00,000",
        "description": "DigitalMarketingExperts is seeking a talented Digital Marketing Specialist to drive our online presence. You will implement strategic digital marketing initiatives using SEO, SEM, Google Analytics, and Social Media Marketing. Your efforts will contribute to enhancing our brand visibility and attracting a larger audience.",
        "logo_url": "https://cdn.pixabay.com/photo/2015/12/22/13/27/laptop-1104066_640.jpg"
      },
      {
        "id":4,
        "job_title": "AI/ML Engineer",
        "tech_stack": ["Python", "TensorFlow", "PyTorch", "Machine Learning"],
        "experience": "3-6 years",
        "company_name": "AIInnovators",
        "location": "Bengaluru, Karnataka",
        "salary": "₹9,00,000 - ₹12,00,000",
        "description": "AIInnovators is looking for an AI/ML Engineer to join our team. As an AI/ML Engineer, you'll work on cutting-edge AI projects using Python, TensorFlow, PyTorch, and machine learning algorithms. Your role will involve developing, testing, and deploying AI models to solve real-world problems.",
        "logo_url": "https://cdn.pixabay.com/photo/2019/04/29/07/04/software-development-4165307_640.jpg"
      },{
        "id":5,
        "job_title": "DevOps Engineer",
        "tech_stack": ["Docker", "Kubernetes", "Jenkins", "AWS"],
        "experience": "4-7 years",
        "company_name": "CloudBuilders",
        "location": "Pune, Maharashtra",
        "salary": "₹12,00,000 - ₹16,00,000",
        "description": "Join CloudBuilders as a DevOps Engineer and play a vital role in our software development lifecycle. You'll utilize Docker, Kubernetes, Jenkins, and AWS to automate and streamline our deployment and infrastructure processes. Your efforts will ensure a robust and scalable platform for our applications.",
        "logo_url": "https://media.istockphoto.com/id/1197257945/photo/programmers-cooperating-at-it-company-developing-apps.webp?b=1&s=612x612&w=0&k=20&c=Hgv8ewuBLHGrCfNRvtI1aj_IQrEwf7FEbJjTB1cKnn4="
      },
      {
        "id":6,
        "job_title": "Front End Developer",
        "tech_stack": ["HTML", "CSS", "JavaScript", "React"],
        "experience": "2-5 years",
        "company_name": "WebTechies",
        "location": "Bengaluru, Karnataka",
        "salary": "₹6,00,000 - ₹9,00,000",
        "description": "WebTechies is seeking a skilled Front End Developer to create amazing user interfaces. As a Front End Developer, you'll leverage your expertise in HTML, CSS, JavaScript, and React to build visually appealing and interactive web applications that provide exceptional user experiences.",
        "logo_url": "https://media.istockphoto.com/id/984117566/photo/website-design-developing-programming-and-coding-technologies.webp?b=1&s=612x612&w=0&k=20&c=VzmmY2phgdy4gR3JsTY3EAFTZ4XPglM9JJ0hAdhdQSM="
      },
      {
        "id":7,
        "job_title": "Content Writer",
        "tech_stack": ["Copywriting", "SEO", "Content Strategy", "Grammarly"],
        "experience": "2-4 years",
        "company_name": "ContentCraft",
        "location": "Mumbai, Maharashtra",
        "salary": "₹5,00,000 - ₹7,00,000",
        "description": "ContentCraft is looking for a creative Content Writer to produce engaging and informative content. You'll be responsible for creating high-quality articles, blog posts, and website content using your skills in copywriting, SEO, and content strategy. Your work will help drive our brand's online presence and engagement.",
        "logo_url": "https://media.istockphoto.com/id/1179188076/photo/website-design-developing-programming-and-coding-technologies.webp?b=1&s=612x612&w=0&k=20&c=0yd_AdDQXNTRg_UCNZu77rnutUi8NY0toRb5HWyntk0="
      },
      {
        "id":8,
        "job_title": "Mobile App Developer",
        "tech_stack": ["React Native", "JavaScript", "Redux", "Firebase"],
        "experience": "3-6 years",
        "company_name": "AppInnovate",
        "location": "Chennai, Tamil Nadu",
        "salary": "₹8,00,000 - ₹12,00,000",
        "description": "AppInnovate is seeking a talented Mobile App Developer to build exceptional cross-platform applications using React Native. As a Mobile App Developer, you'll work on developing, testing, and deploying mobile apps that deliver a seamless user experience across various devices and platforms.",
        "logo_url": "https://media.istockphoto.com/id/1200075866/photo/first-bump-between-colleagues-at-work-everyday-work-in-the-office.webp?b=1&s=612x612&w=0&k=20&c=CE47WzkHx-w2wn52TTNVN4J9D8L37PVI22ydI87-cZM="
      },
      {
        "id":9,
        "job_title": "Network Security Analyst",
        "tech_stack": ["Firewalls", "Intrusion Detection Systems", "SIEM", "Cybersecurity"],
        "experience": "5-8 years",
        "company_name": "SecureNet",
        "location": "Delhi, Delhi",
        "salary": "₹10,00,000 - ₹15,00,000",
        "description": "SecureNet is looking for a skilled Network Security Analyst to ensure the safety and integrity of our network systems. As a Network Security Analyst, you'll be responsible for implementing and managing security measures, analyzing vulnerabilities, and responding to security incidents.",
        "logo_url": "https://media.istockphoto.com/id/939787416/photo/two-female-programmers-working-on-new-project-they-working-late-at-night-at-the-office.webp?b=1&s=612x612&w=0&k=20&c=-G7c_KKfvVnjjXSnl7qYz24vB-5GXqFghMAjw49Sr2U="
      },
      {
        "id":10,
        "job_title": "HR Manager",
        "tech_stack": ["Human Resources", "Employee Relations", "Recruitment", "Performance Management"],
        "experience": "7-10 years",
        "company_name": "PeopleFirst Corp",
        "location": "Bengaluru, Karnataka",
        "salary": "₹15,00,000 - ₹20,00,000",
        "description": "Join PeopleFirst Corp as an HR Manager and lead our human resources department. You'll oversee various HR functions, including employee relations, recruitment, performance management, and policy implementation, ensuring a positive work environment and effective employee engagement.",
        "logo_url": "https://media.istockphoto.com/id/1395144844/photo/diverse-businesspeople-smiling-cheerfully-during-an-office-meeting.webp?b=1&s=612x612&w=0&k=20&c=KXK9MkhuV_mC94W7AHnFXRDgFluXSXLjtXsfNSRx2mA="
      },
      {
        "id":11,
        "job_title": "Database Administrator",
        "tech_stack": ["SQL", "Oracle", "Database Optimization", "Backup & Recovery"],
        "experience": "4-7 years",
        "company_name": "DataMasters",
        "location": "Mumbai, Maharashtra",
        "salary": "₹10,00,000 - ₹14,00,000",
        "description": "DataMasters is looking for a skilled Database Administrator to manage and optimize our databases. As a Database Administrator, you'll handle SQL, Oracle, and ensure efficient database performance, backup, and recovery processes, ensuring data integrity and availability.",
        "logo_url": "https://media.istockphoto.com/id/1420017371/photo/excited-call-centre-agents-fist-bump-and-celebrating-deal-promotion-and-sale-from-above-in.webp?b=1&s=612x612&w=0&k=20&c=koZjmDEvsdQTsMwWw79ltTskXrjzx57JrNP2XNWu5ow="
      },
      {
        "id":12,
        "job_title": "UI/UX Researcher",
        "tech_stack": ["User Research", "Usability Testing", "Prototyping", "User Interviews"],
        "experience": "3-6 years",
        "company_name": "UXInnovations",
        "location": "Bengaluru, Karnataka",
        "salary": "₹8,00,000 - ₹11,00,000",
        "description": "UXInnovations is seeking a passionate UI/UX Researcher to drive user-centered design. As a UI/UX Researcher, you'll conduct user research, usability testing, and interviews to gather insights and create designs that enhance user satisfaction and usability.",
        "logo_url": "https://media.istockphoto.com/id/1071467916/photo/group-of-young-students-working-on-an-assignment.webp?b=1&s=612x612&w=0&k=20&c=kxSeI0k4Vv5l05wvkswdoyWpQtV59X3PxhCyhqa2DXg="
      },
      {
        "id":13,
        "job_title": "Financial Analyst",
        "tech_stack": ["Financial Modeling", "Excel", "Budgeting", "Financial Reporting"],
        "experience": "2-5 years",
        "company_name": "FinancialPros",
        "location": "New Delhi, Delhi",
        "salary": "₹6,00,000 - ₹9,00,000",
        "description": "FinancialPros is looking for a Financial Analyst to analyze financial data and support decision-making. As a Financial Analyst, you'll create financial models, handle budgeting, and prepare financial reports to guide the company's financial strategies and investments.",
        "logo_url": "https://media.istockphoto.com/id/1395144844/photo/diverse-businesspeople-smiling-cheerfully-during-an-office-meeting.webp?b=1&s=612x612&w=0&k=20&c=KXK9MkhuV_mC94W7AHnFXRDgFluXSXLjtXsfNSRx2mA="
      }
    
    ]
  
}

  
