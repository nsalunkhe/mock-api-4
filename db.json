{
   
"users":[

],
"companies":[

],
"cart":[
    
],
"product":[
    {
        "id":0,
        "title":"IPhone 11",
        "price":500,
        "desc":"There are many variations of passages of Lorem Ipsum available, but the majority have suffered alteration in some form, by injected humour, or randomised words which don't look even slightly believable. If you are going to use a passage of Lorem Ipsum, you need to be sure there isn't anything embarrassing hidden in the middle of text",
        "img":"https://images.unsplash.com/photo-1609654984575-f64878202abf?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8MTB8fGlwaG9uZSUyMDEwfGVufDB8fDB8fA%3D%3D&auto=format&fit=crop&w=500&q=60"
    },
    {
        "id":1,
        "title":"IPhone 11 pro",
        "price":700,
        "desc":"There are many variations of passages of Lorem Ipsum available, but the majority have suffered alteration in some form, by injected humour, or randomised words which don't look even slightly believable. If you are going to use a passage of Lorem Ipsum, you need to be sure there isn't anything embarrassing hidden in the middle of text",
        "img":"https://images.unsplash.com/photo-1598327105666-5b89351aff97?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8OXx8aXBob25lJTIwMTB8ZW58MHx8MHx8&auto=format&fit=crop&w=500&q=60"
    },
    {
        "id":2,
        "title":"IPhone 11 pro max",
        "price":800,
        "desc":"There are many variations of passages of Lorem Ipsum available, but the majority have suffered alteration in some form, by injected humour, or randomised words which don't look even slightly believable. If you are going to use a passage of Lorem Ipsum, you need to be sure there isn't anything embarrassing hidden in the middle of text",
        "img":"https://images.unsplash.com/photo-1589798312995-8428138bb1ae?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8N3x8aXBob25lJTIwMTB8ZW58MHx8MHx8&auto=format&fit=crop&w=500&q=60"
    },
    {
        "id":3,
        "title":"IPhone 11 ultra",
        "price":900,
        "desc":"There are many variations of passages of Lorem Ipsum available, but the majority have suffered alteration in some form, by injected humour, or randomised words which don't look even slightly believable. If you are going to use a passage of Lorem Ipsum, you need to be sure there isn't anything embarrassing hidden in the middle of text",
        "img":"https://images.unsplash.com/photo-1603921326210-6edd2d60ca68?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8NXx8aXBob25lJTIwMTB8ZW58MHx8MHx8&auto=format&fit=crop&w=500&q=60"
    },
    {
        "id":4,
        "title":"IPhone 11 ultra pro max",
        "price":1000,
        "desc":"There are many variations of passages of Lorem Ipsum available, but the majority have suffered alteration in some form, by injected humour, or randomised words which don't look even slightly believable. If you are going to use a passage of Lorem Ipsum, you need to be sure there isn't anything embarrassing hidden in the middle of text",
        "img":"https://images.unsplash.com/photo-1603816245457-fe9c80b740ff?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8MTZ8fGlwaG9uZSUyMDEwfGVufDB8fDB8fA%3D%3D&auto=format&fit=crop&w=500&q=60"
    }
] ,
"jobs":[],
"task":[],
"blogs":[],
"day1react":[
    {
        "id":1,
         "question":"What is React.js? How does it differ from other Frontend frameworks?",
         "answer":"React.js is a open-source-js library used to build user interfaces(UI) for web applications. It is developed by Jordan Walke (Facebook) and maintained by community of developers . one of the mai  difference between React.js and other frameworks is it's approach to rendering it uses Virtual Dom instead of directly manipulating the browsers Dom . React.js can update the ui more efficiently by only updating trhe parts of the page that have changed ,rather than updating the entire page .React.js focus on buildingreusable components React components are independent ,reusable pieces of code that can be combined to create complex UI's. this enables developers to write less code and makes it easier .overall React.js is a powerfull tool for building dynamic ,responsive and scalable user interfaces for web applications .It is based on declerative programming ,Which means that you describe what you want the UI look like and react.js handles the updates and rendering . It can be used to build single page applications (SPA's) which are web applications that load a single HTML page and dynamically update the content as the user interacts with the application . React.js is used by many popular websites and applications including Facebook,Instagram,NetFlix,Airbnb.It has large active comunity of developers who contribute to the library."
         ,"code":""
    },
    {
        "id":2,
        "question":"Can youn explain concept of the Virtual DOM in React.js?",
        "answer":"In traditional web applications ,The browser's DOM is used to represent the structure of the web page .The DOM is a tree like structure of HTML elements, and each time the state of an application changes ,the browser has to update the DOM to reflest those changes .This process is called reconcillation and it canbe slow and resource-intensive, especially for complex user interfaces .React.js addresses this issue by using a virtual DOM ,The virtual DOM is a lightweight representation of the actual DOM ,created and maintained by React.js whenever the state of a react component changes ,React.js compares the updated virtual DOM to the previous version to identify the specific changes that need to be made to actual DOM rather than updating the entire DOM it only updates the changes results in faster rendering times and a smoother user experience Real DOM------Lightweight copy of virtual DOM (Update)----->update real DOM with those changes . "
        ,"code":""
    },
    {
        "id":3,
        "question":"what are react components and how they work?",
        "answer":"React components are independent , reusable pieces of code that define part of a user interface in ract application it canbe simple such as a button or a form field or complex ,such as a chart or a data grid .By composing these components together you can create more complex UI's  .React Components are divided into two types 1. Functional Component 2. Class Component . Functional Component: are just JavaScript functions that take in props and return jsx. functional component dont have state,but they can use useState hook to achieve similar functionality. functional components don't have lifecycle methods but they can use useEffect hook to achieve similar functionality. functional components are more resuable as they are just functions which can be easily reused across multiple components. functional components are usually faster and more efficient than class components.It can not use this keyword. it use return to render jsx. Class Component: Class Components are classes that extend the React Component Class and have a render method.class components have state, which is used to store data that can be change over time.class components havelifecycle methods which are methods that get called at diffirent points in the component's lifecycle . the class components are less reusable due to the complex inheritance hierchy and render methods. it uses this keyword to refer their own instance. use render method to render jsx. When it comes to state management In class component state is initialized in the constructor but In functional component state is initialized using the useState hook    ",
        "code":"https://drive.google.com/file/d/1hI_tAKHjOmIbAf07Tt1V4XEiYDBc-IWi/view?usp=sharing"
    },
    {
        "id":4,
        "question":"What is the significance of render method in React?",
        "answer":"It is a required method in a react class component that is responsible for returning a description of what component should render on screen. when render method is called , React generates a virtual DOM representation of the component's output based on the jsx returned by the render() method . whenever the state or props of a component change ,react will call the render() method again to regenerate the virtual DOM .React then compares new virtual DOM with previous virtual DOm and only updates the parts of the actual DOM",
        "code":""
    },
    {
        "id":5,
        "question":"What is jsx? why it is used in react.js?",
        "answer":"jsx stands for javascript XML. that allows you to write HTML like code in your jacascript.it looks similar to HTML but it is not HTML instead it is a syntax extension that allows you do define React elements which is lightweight description of what should be displayed on the screen. it is not required in react and you can use plain js to define UI if you prefer .but jsx has some benifits like 1.it improves readability 2.better performance 3.Intuative syntax(better understanding of syntax) 4.It is faster and more efficient",
        "code":""
    },
    {
        "id":6,
        "question":"How does js enable you to reuse components across different parts of your application?",
        "answer":"Component Composition: This is the process of building complex UI's. Props:(short for properties) are a way to pass data from a parent component to a child component we can use the same component in diffirent parts of your application with props you can customize your components dynamically By passing props down to child components",
        "code":""
    },
    {
        "id":7,
        "question":"what is the difference between functional and class components?",
        "answer":"Class Component : 1.Defined as Javascript class that extends the react component class 2. Class components has state 3.render method is required that returns the UI of the component 3.It can use lifecycle methods  Functional Component: 1.defined as a plain js function 2.It uses return to to render Ui of the component 3.do not have any lifecycle methods 3.It does not require any state or lifecycle method.",
        "code":""
    }
],
"day2react":[
    {
        "id":1,
        "question":"What is the difference between jsx and javascript syntax?",
        "answer":"jsx-------> 1.looks like HTML 2.Allows you to use HTML like syntax to define components 3.Use specifically for use with React.js components.......| js----> 1.Looks like regular javascript 2.Requires the use of React.createElement() method to define components 3.harder to read than jsx 4.can be used to define components in a wider varity of situations ",
        "code":"https://drive.google.com/file/d/1gEKjjr-_uBrd9QeWRpQLPHTZHZQQs_8J/view?usp=sharing"
    },
    {
        "id":2,
        "question":"How do you use props to pass data between components in React.js and what are some best practices to follow when doing so?",
        "answer":"Props: is a way to pass data from parent component to child component. some of the best practices are 1.Always pass data down the component tree, from parent to child .this ensures that the data flow is unidirectional and makes it easier to reason about your application state 2.Avoid modifying props directly. props should be considerd read-only and any changes to props should be made in the parent component and passed down again. 3. Use default props to provide fallback values ,you can define default values for props using the default props property on your component. 4.Be careful when passing complex objects or functions as props. It's generally better to keep your props simple and avoid passing complex data structures or functions if possible.",
        "code":"https://drive.google.com/file/d/1_KdLrBKR2KzwIWutpeQ4cGluW1NhgtAi/view?usp=sharing"
    },
    {
       "id":3,
       "question":"What is the significance of the children props in react js and how can it be used to render dynamic content within a component?",
       "answer":"You can pass other components as children to a component, allowing you to compose complex UIs from simpler components.",
       "code":"https://drive.google.com/file/d/1YIQuMs-wnG16FZdYldqi1LfIFC12j41g/view?usp=sharing"
    },
    {
        "id":4,
        "question":"Can you explain concept of prop drilling with example? How to avoid it?",
        "answer":"prop drilling is a concept in React.js where date is passed down from a parent component to a child component,and then passed down to another child component ,and so on. untill it reaches the component it needed. This can lead to a situation where components that don't actually need the data are receiving it as a prop , which can be inefficient and lead to complex and hard to maintain code. To avoid prop drilling one approach is to use the CONTEXT API in React : It allows you to pass data down to components without having to pass it explicitely as props at each level of the component tree.",
        "code":"https://drive.google.com/file/d/1NMG8JmOdb60BBHkr96UwAe-OdNdaHmoE/view?usp=sharing"
    },
    {
        "id":5,
        "question":"How can you avoid prop-drilling using context api?",
        "answer":" Context API allows you to pass data down to components without having to pass it explicitely as props at each level of the component tree .Please refer code to get answer",
        "code":"https://drive.google.com/file/d/1RKcmagNHk4wYXA-zMiFnsZfk15CIKcDl/view?usp=sharing"
    },
    {
        "id":6,
        "question":"How do you use conditional rendering in React.js and what are Some common patterns for doing so?",
        "answer":"Conditional Rendering: ability to render diffirent components or content based on certain conditions 1.if else 2.Ternary Operator 3.Logical Operator 4.Switch Statements . ----> follow the code to understand how these operators works",
        "code":"https://drive.google.com/file/d/10SjN25bIq-XZHhrskfgK_w51vYAIrfHJ/view?usp=sharing"
    },
    {
        "id":7,
        "question":"What is the significance of the Key prop in React.js , and how can it be used in combination with conditional rendering to optimize performance?",
        "answer":"In React Key prop is special attribute to help to identify which items have changed,been added,or been removed from a list of rendered items. when a list of elements is rendered ,React assigns a unique identifier to each element in the form of key .this allows react to track each element and determine whether it has been ,updated ,moved or deleted . without key react may be forced to re-render the entire list even if only one item has changed which can result in performance issue.",
        "code":"https://drive.google.com/file/d/1_Zc-4SbmAn8UKHp1g2gn5K00GL3jai6A/view?usp=sharing"
    }
],
"day3react":[
    {
        "id":1,
        "question":"What is state management in React.js, and why is it important?",
        "answer":"State management in react.js is refer to the process of managing the data that is used by components. It involves defining and updating the state of the component to reflect changes in the data. proper state management is essential for building scalable and maintainable applications in react.js",
        "code":"https://drive.google.com/file/d/1jx4GVn9RWC7GSlhe88nSVmOEjc0gNi2Y/view?usp=sharing"
    },
    {
        "id":2,
        "question":"What is the difference between state and props?",
        "answer":"Props:1. props are used to customize a component and pass data from one component to another.2.props are read only and should not be modified directly within a component.3. props are passed down from a parent component to child component.4.perops are accessable via this.props within a class component or as an argument to a functional component. 5. props are used for one way data flow from parent to child components.______State:1.state is used to manage data within a component and trigger a re-render of the component when updated.2.state is mutable and can be updated within a component using setState().3.state is accessible via this.state within a class component or as a hook useState in a functional component.4.state is managed within a component and can be passed down to child components as props.5.state is used for managing internal state within a component and triggering a re-render when necessary.",
        "code":"https://drive.google.com/file/d/1QoIZhMxzpzAHjolVPve_I9PWLmRsAEbc/view?usp=sharing"
    },
    {
        "id":3,
        "question":"What is the difference between functional and class components?",
        "answer":"refer code to understand answer.",
        "code":"https://drive.google.com/file/d/1aVGPlnl3-Fz0kNWNIRE-TAiZ6aCW7MWy/view?usp=sharing"
    },
    {
        "id":4,
        "question":"What are the advantages and disadvantages of using React.js in web development?",
        "answer":"Advantages of using React.js in web development:1.Reusable components: React.js provides a modular approach to building web applications with reusable components that can be easily shared across different parts of an application. This saves time and effort in coding, and promotes consistency in the user interface.2.High performance: React.js uses a virtual DOM to efficiently render changes to the user interface, resulting in faster and smoother performance compared to traditional methods.3.Large community and ecosystem: React.js has a large and active community, with many third-party libraries and tools available for use in web development.4.SEO-friendly: React.js can be easily optimized for search engines, as it allows for server-side rendering.___Disadvantages of using React.js in web development:1.Steep learning curve: React.js has a relatively steep learning curve, especially for developers who are new to the library or to web development in general.2.Overhead: React.js has a lot of overhead, and can require additional tools and libraries to be installed and configured, which can be time-consuming.",
        "code":""
    },
    {
        "id":5,
        "question":"What is the setState() method in React, and how does it differ from directly assigning state?",
        "answer":"In React, setState() is a method provided by the Component class that is used to update the state of a component. It is the recommended way to update state because it is asynchronous, which means that React can batch multiple setState() calls together for better performance. setState() takes an object or a function that returns an object as its argument, and merges the new state into the current state of the component. Directly assigning state by modifying the state object directly is not recommended because it can lead to unexpected results. In fact, React will issue a warning if you try to modify state directly. For example, if you have a state object with two properties and you modify one of them directly, the other property will be lost.",
        "code":"https://drive.google.com/file/d/191qEAxra05dgm_Bm1V_4M3pkK0fgoyGM/view?usp=sharing"
    },
    {

    }
],
"day4react":[],
"day5react":[],
"day6react":[
    {
        "id":1,
        "question":"What is Redux, and what problem does it solve in React.js applications?",
        "answer":"1.Redux is a state management library for JavaScript applications, particularly those built with React.2.It provides a centralized way of managing application state, which can help to simplify the flow of data through an application.3.Redux works by maintaining a single, centralized store for an application's state, which can be accessed and updated by any part of the application.4.Redux can help to solve problems such as prop drilling, where data must be passed down through multiple levels of components, and complex state management that can become difficult to maintain.5.Redux accomplishes this by defining actions and reducers, which handle updates to the store's state in a predictable and scalable way.6.Actions are objects that describe changes to the state, and are triggered by events in the application.7.Reducers are pure functions that take an action and the current state, and return a new state based on the action.",
        "code":""
    },
    {
        "id":2,
        "question":"How does the Redux Store work, and what are its main features?",
        "answer":"The Redux Store is a single, centralized place to store the state of an entire React.js application. It is an object that holds the entire state tree of the application and provides a way to dispatch actions to update the state.Here are the main features of the Redux Store:Centralized state management: The store holds the entire state of the application, making it easy to access and update from any component in the app.Immutable state: The store's state is immutable, which means that it cannot be changed directly. Instead, changes to the state are made by dispatching actions, which are then handled by reducers.Predictable state changes: The state changes in the store are predictable because they are made by dispatching actions, which are handled by pure functions called reducers. Reducers take in the current state and an action, and return a new state based on that action.",
        "code":""
    },
    {
        "id":3,
        "question":"What are actions in Redux, and how do they relate to state changes?",
        "answer":"In Redux, actions are plain JavaScript objects that represent an intention to change the state of the application. They describe what has happened in the application, such as a user clicking a button or data being received from an API. Actions contain a type field that specifies the type of action being performed and an optional payload field that provides additional data needed to update the state.Actions are used to trigger state changes in the Redux Store through reducers. When an action is dispatched, it is sent to the Store, which calls the appropriate reducer function to update the state based on the action type and payload. The reducer creates a new copy of the state with the necessary changes applied and returns it, replacing the previous state in the Store.Actions are an essential part of the unidirectional data flow in Redux, which helps to ensure that the state is predictable and easy to reason about. They make it easy to keep track of all the changes that have occurred in the application and provide a clear and consistent way to modify the state.",
        "code":""
    },
    {
        "id":4,
        "question":"What are reducers in Redux, and what role do they play in managing state?",
        "answer":"Reducers are functions in Redux that specify how the application's state should be updated in response to actions. They take in the current state and an action object as arguments, and return the updated state.Reducers are responsible for determining how the state changes in response to actions. They must be written in a way that is pure, meaning they do not modify the original state object, and they always return a new state object, even if the state has not changed.Reducers are the only way to modify the state in a Redux application, and they are typically combined into a single root reducer using the combineReducers() function. The root reducer is then passed to the Redux store, where it is used to manage the application state.Take the current state and an action as input.Determine how the state should change in response to the action.Return the new state as output.Must be pure functions that do not modify the original state object.Are combined into a single root reducer using combineReducers().Are responsible for managing the application state in Redux.",
        "code":""
    },
    {
        "id":5,
        "question":"How do you create a Redux store in a React.js application, and what are the required elements?",
        "answer":"1.Import the createStore function from the redux package.Create a reducer function to handle the state changes in your application.Use the createStore function to create a new store, passing in your reducer function as an argument.Optionally, you can set the initial state of your store by passing it as a second argument to the createStore function.",
        "code":"https://drive.google.com/file/d/1fAzR1K8_cb9s9MFya0M9dfeBaKewtm_5/view?usp=sharing"
    },
    {
        "id":6,
        "question":"What is the difference between dispatching an action and invoking a reducer in Redux?",
        "answer":"Dispaching an action means sending a message to redux store ,indicating that state change should be occur. An action is an object that contains a 'type' field and any additional data that may be necessary to update the state.invoking a reducer means calling a function that takes the current state and an action as argument ,and returns the new state of the application.reducers are pure functions that should not modify the existing state, but instead should return a new state based on the action that was dispatched.",
        "code":"https://drive.google.com/file/d/1sRsAJNWcgCtmYCqOMn-plDUvgdof_dFk/view?usp=sharing"
    },
    {
        "id":7,
        "question":"How can you connect a component to a Redux store, and what are the benefits of doing so?",
        "answer":"In order to connect a component to a Redux store in a React.js application, you need to use the connect function provided by the react-redux library. This function takes two arguments:1.mapStateToProps:a function that maps the state from the Redux store to props that are passed to the connected component.2.mapDispatchToProps:a function that maps action creators to props that are passed to the connected component. The benefits of connecting a component to a Redux store include:Simplified state management: Connecting a component to a Redux store allows the component to access and update the state without having to pass state down through multiple levels of the component hierarchy.2.Centralized state management:By using a global store, Redux provides a centralized location for managing application state, which can help simplify state management and prevent common bugs associated with unidirectional data flow.3.Improved performance:Connecting a component to a Redux store allows the component to subscribe to updates to the state that are relevant to it, which can help improve performance by reducing unnecessary re-renders.",
        "code":"https://drive.google.com/file/d/1p9WByHbLOm0PDWuuQGQsAaxnLipZriOX/view?usp=sharing"
    },
    {
        "id":8,
        "question":"What is the purpose of the connect() function in the React-Redux library?",
        "answer":"The connect() function in the React-Redux library is used to connect a React component to the Redux store.It is a higher-order function that returns a new component, which wraps the original component and provides it with the data it needs from the store.The main purpose of the connect() function is to provide a convenient way to access and manipulate the store's data from within a React component. By connecting a component to the store you can:Access data from the store's stateDispatch actions to update the store's state Re-render the component automatically when the store's state changes The connect() function takes two arguments: mapStateToProps and mapDispatchToProps.__1.mapStateToProps: A function that maps the store's state to the component's props.__2.mapDispatchToProps: A function that maps action creators to the component's props.By using these functions, the connect() function provides the component with the data it needs from the store, and the ability to dispatch actions to update the store's state.",
        "code":""
    },
    {
        "id":9,
        "question":"What are thunks in Redux, and how can they be used to handle asynchronous actions?",
        "answer":"Thunks are functions that allow you to delay the execution of some logic until a later time. In the context of Redux, thunks are used to handle asynchronous actions, such as fetching data from a server.Normally, when you dispatch an action in Redux, the reducer immediately updates the state based on that action. However, when you dispatch a thunk, it first executes some additional logic (such as making an API call) before dispatching a regular action. This allows you to handle asynchronous actions in a more organized way.To use thunks in Redux, you typically need to install the 'redux-thunk' middleware and create a thunk function that returns another function. The inner function receives the 'dispatch' method as an argument, which it can use to dispatch regular actions at a later time.",
        "code":""
    }
],
"day7react":[],
"day1js":[
    {
        "id":1,
        "question":"What is Js?",
        "answer":"1.Javascript is High-Level Dynamic Interpreted Programming Language commonly used in web developement.2.used to add interactivity and functionality to web pages ,web applications ,making them more engaging and user friendly .3.created by BRENDAN EICH in 1995 when he was working at NetScape Communications 3.This language is supported by all major web browsers 4.also used on the server side e.g. Node.Js 5.Has large active community with numerous library and frameworks available to facilitate developement.6. Js runs natively in all major web browsers which means that it can be executed on the client side without required any additional software or plugins that makes it a versatile and accessible choice for building web applications. ",
        "code":""
    },
    {
        "id":2,
        "question":"What are web browsers?",
        "answer":"1.Software application that allows users to access and view websites on the www. 2.It retreives information from web servers and display it on the users device in the user friendly format such as text,images,videos.3.web browsers are designed to interpret display HTML,CSS,Js code. 4.It acts as an interface between the user and web server---USER-->BROWSER<----SERVER.5. allowing the users to navigate through web pages ,submit forms and interpret with dynamic content. e.g. Chrome,Firefox,Safari,Microsoft-edge,opera.",
        "code":""    
    },
    {
        "id":3,
        "question":"What are web-servers?",
        "answer":"1.Web server is a computer program that serves content to clients over the www it recieves requests from clients (browsers) and responds with web pages,documents. 2.It is essential component of the internet infrastructure allowing users to access websites and other online resources.3. e.g. Apache,Nginx,microsoft,NodeJs,",
        "code":""
    },
    {
        "id":4,
        "question":"What is Client-Server-Model?",
        "answer":"1.When we type / search url of any website on chrome (browser) --->browser sends requests to web server hosting the website ----> The web server process that request retrieves the requested resource and sends back to the browser.",
        "code":""
    },
    {
        "id":5,
        "question":"What are various protocols to communicate with clients?",
        "answer":"1.HTTP:This protocol is used to transfer data over the internet.It is not a secure protocol as it transmits login credentials and data in plain text making it vulnarable to interception and eavesdropping...| ----| 2.HTTPS:S for secure and it provides secure data transfer over the internet by encrypting it---| 3.FTP(FIle Transfer Protocol): Used for transferring files between computers on a network.It is an application layer protocol that uses client server model. It operates on PORT 21 . It allows user to upload ,download,manage files on a remote server.It has two modes of operations 1.Active mode 2.Passive mode ...| Active Mode: FTP server initiates the connection to the client computer for data transfer. Passive Mode : Client initiates the connection to the server. It is not a secure protocol as it transmits login credentials and data in plain text making it vulnarable to interception and eavesdropping...| FTPS: File Transfer Protocol Secure : Same like HTTPS , It supports for SSL/TLS encryption, providing secure data transfer and remote file management.FTP/SFTP encrypts all data and commands sent between the client and server making it more secure than FTP and FTPS...| SMT Protocol: Simple Mail Transfer Protocol : It is used in sending and receiving email messages between servers on a network. It operates on PORT 25 . It works by sending email messages from a client to a mail server or from one mail server to another .the mail messages are composed of a header which contains the actual message  "

    },
    {
        "id":6,
        "question":"Why do we use https over http?",
        "answer":"HTTP is not a secure and transmits data in plain text. HTTPS provides end-to-end encryption , which means that any data transmitted between the client and server is encrypted and can not be read by unauthorized users . this protects sensitive information such as login credentials ,creadit card information and personal data from being intercepted and stolen-----1.Authentication: HTTPS uses digital certificates to verify the identity of the server and ensure that the client is communicating with the correct website .this prevents man in the middle attacks where an attacker intercepts the communication between the client and the server and impersonates one of them .2.SEO:Google has confirmed that https is a ranking factor in its search algorithm.which means that websites that use https may rank higher in search results than those use http.-----3.Compliance: many industries and regulations require websites to use https to protect user data such as payment card industry data security standerd (PcIDSS) for e-commerce websites and general data protection regulation(GDPR) for websites that collect personal data. overall HTTPS provides a more secure and transworthy way of transmitting data over the internet , and it is incresingly becoming the standerd for websites that value the privacy and security of the users.",
        "code":""
    },
    {
        "id":7,
        "question":"What is SSL and TLS encryption?",
        "answer":"SSL: SECURE SOCKET LAYER (developed by Netscape communications corporation in the mid-1990's)_____TLS: Transport Layer Security (It is a successer of SSL and standerdized by IETF Internet Engineering Taskforce , It is updated version of SSL)  these two are cryptographic protocols that provide secure communication over the internet. Both use encryption to protect data transmission and prevent unauthorized access.    Hand Shake key access: It works by establishing a secure connection between two parties such as web server and a client web browser involves following steps 1.The client initiates connection to the server and requests secure server response with its digital certificates which contains the servers public key and other identifying information.3. The client uses the servers public key to encrypt a random session key, which is sent to the server . the server decrypts the session key and uses it to encrypt and decrypt data transmitted between client and server.4. Data Transfer:Once the connection is established ,data is transmitted between the client and the server in encrypted form, ensuring that it cannot be intercepted and read by unauthorized users.SSL/TLS encryption is used in a wide range of applications ,including web browsing ,email instant messing and file transfers .It is essential for protecting sensitive information such as login credentials,credit card information ,personal data transmitted over the internet. ",
        "code":""
    },
    {
        "id":8,
        "question":"Define ways of hoisting website on the server",
        "answer":"1.Shared Hoisting : Multiple websites are hoisted on the same web server (It uses software to keep each website file seprate).2.Virtual private server:Single physical server is divided into multipe virtual servers each of them can use one or more websites. 3.Dedicated server: Clients rents an entire physical server for their own use (full Control).4. Cloud hosting: multiple servers are used to serve website(to prevent server down).   To specify web server to host website you need to register a domain name and configure its DNS (Domain Name System) records to point to the IP address of the web server where your website is hosted.Here are steps to specify a web server to host a website 1.Choose a domain name register :A domain name register is a company that manages the registration of domain names . you need to choose a register and register your domain name. 2. Choose a hosting provider : A web hosting provider is a company that provides the server space and resources to host website you need to choose hosting provider and signup for web hosting plan .3. Setup your website on the web server: Once you have signed up for a hosting plan you need to setup your website on the web server .this involves uploading your website files and configuring the web server software to serve your website.4.Configure DNS records: to point your domain name to the IP address of the web server where your website is hosted ,you need to configure your domains DNS records .this involves creating a record that maps your domain name to the IP address of the web server.5. Wait for DNS propogation : After you have configured your DNS records ,It can take some time for changes to propogate accross the internet from a minute to a several hours . once the DNS changes have propogated ,your website will be accessible at your domain name and users will be able to access it by typing your domain name in the web browser.",
        "code":""
    },
    {
        "id":9,
        "question":"Specifications of JS why do we prefer JS over other languages for web developement?",
        "answer":"1.Client Side Scripting: In Client Side Scripting the web server sends the HTML,CSS,JS files to the users browser and the browser then execute JS code to make the web page more interactive and dynamic.eg.In validation form where user is alerted if they enter invalid data into a form field, or create dynamic menu's.It is benificial because It reduces the workload on the web server . since most of the processing is done on the user's computer this results in faster page load times and more responsive UI.It can be disabled or blocked by the users web browser and that can be vulnarable to security issues if not implimented properly.2.Compatibility: Js is supported by all modern web browsers ,making it a universal language for web -developement. this allows developers to create web applications that works accross diffirent platforms and devices.3.Frameworks and libraries: frameworks:AngularJs,ReactJs,JQuery: provides pre-written code and tools to simplify web developement tasks and speed up the developement process. 4. Integration with HTML,CSS: It integrate seamlessly with HTML,CSS (the other two core technologies used in web developement). allows developers to create dynamic web pages that combine static content with interactive elements.5.Backend Developement: It can be used for backend developement with platforms such as Node.Js allowing developers to cretae server-side applications using JS.",
        "code":""
    },
    {
        "id":10,
        "question":"What are Data-types in JS ?",
        "answer":"1.Primitive : String,Number,boolean,null,undefined,symbol 2.Non Primitive: Object,function ----------1.Primitive-------> a.Immutable:primitive value returns new value When you create a primitive value, a new piece of memory is allocated to store that value. This memory location is fixed and cannot be changed. If you assign a new value to the same variable, a new memory location is allocated for the new value.For example, when you declare and initialize a variable x with the value 10, a new memory location is allocated to store the value 10. If you then re-assign the value of x to 5, a new memory location is allocated to store the value 5, and the original memory location storing the value 10 remains unchanged.This means that primitive data types are immutable because you cannot change the value stored in the original memory location once it has been created. If you want to change the value of a variable, you must create a new memory location and assign the new value to that location. b.It is stored by value: when a variable is assigned a value of primitive datatype, a copy of the value is created and stored in memory e.g. let num1=10; let num2=num1 (here num2 is assigned a copy of num1) num1=20 console.log(num2)====>10 changes to one variable do not affect others. c.It is faster to access: due to stored by a value it is faster to access. 2.Non-Primitive Data-Type: a.It is mutable let person ={name:'ABC'} person.name='DEF' console.log(person.name)===>DEF b. It is stored by reference: after assigining value to variable the variable holds a reference to the memory location where the value is stored .Any changes made to the variable affect the original value. let obj1={name:'ABC',age:30} let obj2=obj1  obj1.age=40  console.log(obj1)==>{name:'ABC',age:40} console.log(obj2)==>{name:'ABC',age:40} Here you can see that if we update any value will be reflecting everywhere.c.Due to stored by a reference this is slower to access",
        "code":""
    },
    {
     "id":11,
     "question" :"What is the difference between == and  === ?",
     "answer":"Both of them are comparison operators ==: check only value not data-type e.g console.log(5=='5')-true ====> Type corcion:Js will attempt to convert one of the values to match the other based on set of implicit conversion rules. ===: Strict equality operator checks both value and datatype. console.log(5==='5')-false ",
     "code" :""  
    },
    {
     "id":12,
     "question":"What is variable in JS ?",
     "answer":"It is named container for storing data values. the data stored in a variable can be of any data-type number,string,boolean,object. we have 3 keywords to declare variables var,let,const. ",
     "code":""
    },
    {
        "id":13,
        "question":"What is the difference between var,let,const?",
        "answer":"1.var:a.used to declare variable with functional scope b.available within entire function including nested functions. c. variable declared with var are hoisted. var declared with var is moved to the top of the function or global scope regardless where the actual decleration appears in the code. d. console.log(myvar) //undefined  var myvar=5 |  var a=5 var a=5 console.log(a) //5  | var a=10 a=9 console.log(a) //9._____2.let: a.It is used to declare variable with block scope. b.Only available within block they are declared in. c. hoisting is not available. d. console.log(mylet) //Uncaught referenceerror :mylet is not defined let mylet=5. e. Random questions : let a=7 let a=7 console.log(a) // SyntaxError: Identifier a has already been declared |  let a=9 a=10 console.log(a) //10.___const:a.const is used to declare variables that can not be reassigned. b. used to declare variable with block scope. c. hoisting is not available d.Some random questions: 1.console.log(a) //ReferenceError: cannot access a before initialization. const a=3 . | 2.const a=3 const a=1 console.log(a) //TypeError:Assignment to constant variable| in general It is recomended to use let or const instead of var as it can help to prevent unexpected behavior due to hoisting and scope issue. ",
        "code":""
    },
    {
        "id":14,
        "question":"Explain diffirent types of operators in Js?",
        "answer":"1.Arithmetic: +,-,/,*,%(remainder) 2.Comparison Operator: compare two values and returns boolean value e.g. let a=10 let b=5 a>b-true a>=b-true 3.Assignment Operator: let a=10 ,a+=5 It is used to assign values (+,-,*,/) 4. Unary Operator:let a=10  Unary plus: console.log(+a)  Unary minus: console.log(-a) typeof: let a=1 typeof(a) = number 5. Ternary operator: It is a short-hand way of writing if else statement let a=10 let b=5  if(a>b){ console.log('a is greater than b')} else{console.log('a is less than b')} ======> a>b? a is greater than b : a is less than b} ",
        "code":""
    },
    {
        "id":15,
        "question":"What are control structures in JS ?",
        "answer":"Control structures in javascript are used to control the flow of execution based on certain conditions e.g. if else , for loop , while loop , switch statements , do while loop.",
        "code":"https://drive.google.com/file/d/1gw20JmHjnw4tDLIgKUgEKq9snxHW2u8j/view?usp=sharing"
    },
    {
        "id":16,
        "question":"What is function in Js ?",
        "answer":"A block of code that can be reused through out  your code .It allows you to encapsulate a piece of functionality . just give it a name and then call it from anywhere in your code",
        "code":"https://drive.google.com/file/d/1JnGdbrRn1tnOpEnW495tEEbzARlznFLM/view?usp=sharing"
    },
    {
        "id":17,
        "question":"What is scope in JS ? tell the difference between local and global scope in function ?",
        "answer":"Scope : refers to the visibility or accessibiity of variable within code. to determine where in your that variable can be accessed and manipulated 1.Global scope 2.Local scope .  Global scope : 1.refers to the variable that are declared outside of any function or block these variable can be accessed from anywhere in your code including inside functions or blocks . 2.Local scope: refers the variables that are declared inside of a function or a block,     these variables can only accessed from within that function.",
        "code":"https://drive.google.com/file/d/1QDr2TyuUtLOgX2yqr-dccKsUzs_aLR8P/view?usp=sharing"
    },
    {
        "id":18,
        "question":"What is Hoisting in JavaScript ?",
        "answer":"It is a behavior where variable and function declerations are moved at the top of their respective scopes during the compilation phase even if they appear later in the code. USE: you can use a variable or function before it has been declared in your code and JS will still recognize it. however it is generally considerd good practice to declare variable and functions at the top of their respective scope to avoid confusion and improve code readability. It's important to note that only variable and function declarations are hoisted, not their assignments or initializations. ",
        "code":""
    },
    {
        "id":19,
        "question":"Explain the use of 'this' keyword in JS.",
        "answer":"It is used to refer current object or context in which a function or method is called . the value is determined at runtime and depends on how the function is called. In JavaScript, there are two ways of binding the this keyword to an object: implicit binding and explicit binding. Here are the main differences between them:Implicit Binding: This happens when this is automatically bound to the object to the left of the dot (.) when a function is called. In other words, the this keyword is implicitly bound to the object that the function is called on. This type of binding is determined by the calling context.Explicit Binding: This happens when this is explicitly bound to an object using call(), apply(), or bind() methods. These methods allow you to specify the value of this when calling a function.",
        "code":"https://drive.google.com/file/d/1TEuuvLb1zdr3TL9Dseq3pbKcwu7b4STD/view?usp=sharing"
    },
    {  
        "id":20,
         "question":"Explain 'this' keyword in Arrow functions.",
         "answer":"Arrow function has lexical binding: Lexical binding is a mechanism in JavaScript that determines how the value of this is determined in a function. It is based on the lexical scope, which is the scope in which a variable is declared.",
         "code":"https://drive.google.com/file/d/1KNQXTjHncOPqAlWlSUGPN8VJ2PWWx_76/view?usp=sharing"
    }
],
"day2js":[
    {
        "id":1

    }
],
"day3js":[],
"day4js":[],
"day5js":[],
"day6js":[],
"day7js":[],
"day1html":[],
"day2html":[],
"day3html":[],
"day4html":[],
"day5html":[],
"day6html":[],
"day7html":[],
"day1mongo":[],
"day2mongo":[],
"day3mongo":[],
"day4mongo":[],
"day5mongo":[],
"day6mongo":[],
"day7mongo":[],
"array":[
    {
       "id":1,
       "question":"Searching in an array-Linear search(given an array of N elements , your task is to write a function to search a given element X in array",
       "answer":"https://drive.google.com/file/d/1a47LM3zeMXO17MB33wP5JUybvj9Ndk0M/view?usp=sharing",
       "time_complexity":"O(n) function iterates only once through an array",
       "space_complexity":"O(1) not any extra element/array is used",
       "advantages":"1.Simple to implement ,easy to understand. 2.it can be used on arrays of any datatype. 3.Does not require any additional memory",
       "drawback":"It has time complexity O(n) ,which in turns makes it slow for large datasets. 2.Not suitable for large array",
       "usecase":"1.When we are dealing with a small datasets. 2.when you need to find an exact value. 3.when you are searching a dataset in contiguous memory"
    },
    {
        "id":2,
        "question":"Searching the element in an array using Binary Search technique.",
        "answer":"https://drive.google.com/file/d/1WB85sOQDzIvacvwDhJqkf4Oj-lhtrUGj/view?usp=sharing",
        "time_complexity":"O(log n)number of iterations required to find the target element is proportional to the logarithm of the size of the input array",
        "space_complexity":"O(1), which means it requires a constant amount of memory regardless of the input size.",
        "advantages":"The time complexity of the search function is O(log n), which is very efficient for large arrays.It works well with sorted arrays, as it first sorts the array and then searches for the element.It is a simple and easy-to-understand implementation.",
        "drawback":"It requires the array to be sorted, which may not always be feasible or desirable.It uses recursion, which can be less efficient in terms of memory usage and performance compared to an iterative implementation.",
        "usecase":", if you have a large dataset of customer information sorted by customer ID, and you need to quickly find the information for a specific customer, you could use binary search to efficiently locate the relevant record."
    },
    {
        "id":3,
        "question":"Reverse an array by replacing elements from both sides.",
        "answer":"https://drive.google.com/file/d/1kvOfa7D-v0xi9UqzrV12QXM9X8Cjl0WD/view?usp=sharing",
        "time_complexity":"O(n)",
        "space_complexity":"O(1)The only extra space used is for the temporary variable 'temp', which requires constant space. The algorithm operates in-place, modifying the input array, and does not create any additional data structures.",
        "advantages":"Time complexity: The time complexity of this method is O(n/2) or O(n) since it iterates through half of the array elements. This makes it more efficient than other methods that have a time complexity of O(n^2).Space complexity: The space complexity of this method is O(1) since it does not require any extra space to perform the reversal. This makes it more memory-efficient than other methods that require additional memory to store temporary variables.",
        "drawback":"Modification of original array: This method modifies the original array, which may not be desirable in some cases. If you need to keep the original array intact, you would have to create a copy of it before applying this method.Not suitable for linked lists: This method works only for arrays, and cannot be used for reversing linked lists or other non-array data structures.",
        "usecase":"The method of using a loop to reverse an array in-place is a good choice when you want to minimize the space complexity of your code. Since it operates on the existing array, it avoids the need to create a new array to hold the reversed elements. This can be especially useful when working with very large arrays or in situations where memory is limited."
    },
    {
        "id":4,
        "question":"Reverse an array recursively.",
        "answer":"https://drive.google.com/file/d/1-ggDCS-nUHItvks8fGAxlwXTpzbZ_5kd/view?usp=sharing",
        "time_complexity":"O(n)",
        "space_complexity":"O(1)",
        "advantages":"One advantage of using this recursive method to reverse an array is that it reduces the space complexity as it does not use any additional space.",
        "drawback":"it may not be as efficient for very large arrays due to the added overhead of the function calls. Additionally, it may not be as easy to read and understand compared to a simple iterative approach.",
        "usecase":"This method of array reversal can be useful in situations where the input array is large and space complexity is a concern, as it has a space complexity of O(1) (constant space). It can also be useful when a recursive approach is preferred over an iterative approach."
    },
    {
        "id":5,
        "question":"Program for array left rotation by d positions",
        "answer":"https://drive.google.com/file/d/1TfVUyDET-atmswPLrlHHHzJ0S1PbGpfe/view?usp=sharing",
        "time_complexity":"O(n): function is iterating through array 2 times",
        "space_complexity":"O(n):function is creating new array of size n",
        "advantages":"It has a time complexity of O(n), which is optimal for rotating an array by a fixed number of positions.It uses an additional array to store the rotated elements, which can be useful if the original array needs to be preserved.It is easy to understand and implement, making it a good choice for simple applications.",
        "drawback":"Additional space requirement: This method requires creating a temporary array to hold the rotated values. If the array is large, this can result in a significant increase in memory usage.Extra loop iterations: In this method, two loops are used to iterate through the array - one for copying the right part of the array to the temporary array and another for copying the left part of the array to the temporary array. This can lead to extra loop iterations compared to some other methods, which can impact performance.",
        "usecase":"One real-life use case for this method of rotating an array is in cryptography. In cryptography, it is common to use permutations of arrays as keys to encrypt and decrypt messages. By rotating an array, a new permutation can be generated, which can then be used as a new key. This helps increase the security of the encryption by making it harder for attackers to guess the key and decipher the message."
    },
    {
        "id":6,
        "question":"Program for array left rotation by d positions Approach-2",
        "answer":"https://drive.google.com/file/d/1b388SPJNELbvzqK5LVxHOXu_814-SapI/view?usp=sharing",
        "time_complexity":"O(n*d) rotating d times",
        "space_complexity":"O(1) modifying original array not creating new one",
        "advantages":"This method does not require any additional memory space. It is a simple and straightforward algorithm to rotate an array. It has a time complexity of O(n*d), where n is the size of the array and d is the number of rotations, which is relatively efficient.",
        "drawback":"The time complexity of this algorithm is not optimal, as it requires multiple shifts for each rotation.",
        "usecase":"rotating shifts for employees, where the order of shifts needs to be rearranged periodically to ensure that everyone has equal opportunity to work different shifts."
    },
    {
        "id":7,
        "question":"Program for array right rotation by K times",
        "answer":"https://drive.google.com/file/d/1AR7vpw3AOHreozQ5EmWt1hLs_8Pz4uQV/view?usp=sharing",
        "time_complexity":"O(n*d)",
        "space_complexity":"O(1)",
        "advantages":"Does not require extra space, the array is modified in place.",
        "drawback":"Time complexity is O(n*d), where n is the size of the array and d is the number of elements to rotate. This may not be efficient for large arrays or a large number of rotations.It may not be suitable for some use cases where the original order of the elements needs to be preserved.",
        "usecase":"in a playlist application where a user wants to shuffle the songs in their playlist. The application can use the rotate array method to randomly select a starting point in the playlist, and then rotate the array to move that starting point to the beginning of the playlist. This effectively shuffles the songs in the playlist without losing any of them."
    },
    {
        "id":8,
        "question":"Searching element in an array.",
        "answer":"https://drive.google.com/file/d/1hTlazqMPFUe91R6tEa5xOtCCyZMZtDun/view?usp=sharing",
        "time_complexity":"O(n) because function is iterating through array once",
        "space_complexity":"O(1) time required to perform the check for each element",
        "advantages":"Simple and easy to understand.Works well for small arrays or when the position of the element to be searched is known.",
        "drawback":"Inefficient for large arrays as it iterates through all elements.Not suitable for searching multiple occurrences of the same element.",
        "usecase":" checking if a certain username already exists in a list of usernames"
    }
],
"stack":[
    {
     "id":1,
     "question":"Create constructor function for stack.",
     "answer":"https://drive.google.com/drive/folders/1y8HuitsUuBuGcyObArOxTeIhrS3YtipD?usp=sharing",
     "time_complexity":"",
     "space_complexity":"",
     "advantages":"Encapsulation: By using a constructor function, you can encapsulate the implementation of the stack within the function, making it easier to manage and maintain.Reusability: Once you have defined a constructor function for a stack, you can create as many instances of the stack as you need, without having to repeat the same code.Customizability: Since the constructor function is a template for creating objects, you can easily customize the behavior of the stack by adding or removing methods or properties.Readability: Using a constructor function with well-named methods can make the code more readable and easier to understand.Error handling: You can include error handling code within the constructor function to ensure that the stack is used correctly and to prevent errors from occurring.",
     "drawback":"Memory management: In some cases, using a constructor function for a stack can lead to memory leaks or inefficient memory usage. For example, if the stack is used to store large or complex objects, the memory used by those objects may not be released when they are popped off the stack, leading to wasted memory.",
     "usecase":"Stacks are useful when we need to keep track of the order of elements and need to access the most recently added element first. Use : Browser history: When we navigate through a website, the pages we visit are pushed onto a stack. When we hit the back button, we pop off the most recent page and navigate back to the previous page." 
    },
    {
        "id":2,
        "question":"Nearest smaller element to right",
        "answer":"https://drive.google.com/file/d/1B7RrLOmFz1OL2RQk_tok4bEW8q67Gb3w/view?usp=sharing",
        "time_complexity":"O(n) because it iterates through the input array once, performing constant time operations for each element.",
        "space_complexity":"The space complexity of this code is O(n) because it creates a new array of the same size as the input array to store the results, and a stack to store the intermediate values. However, the size of the stack at any given time will not exceed the length of the input array, so the space complexity is still O(n).",
        "advantages":"The Stack data structure provides constant time complexity (O(1)) for insertion (push), removal (pop), and peeking (peek) operations.",
        "drawback":"The Stack data structure has a high potential for stack overflow errors if too many items are pushed onto the stack, resulting in a runtime error.",
        "usecase":"When there is a need to maintain a Last-In-First-Out (LIFO) order of data, Stack can be used. the stack data structure is commonly used is in web browser history. When you visit a new web page, the URL is added to the stack. If you click the back button, the previous URL is popped from the stack and displayed. If you then click the forward button, the URL is pushed back onto the stack and the corresponding web page is displayed."
    },
    {
        "id":3,
        "question":"Nearest smaller element to left",
        "answer":"https://drive.google.com/file/d/1R0sUmaMb5F3DnDrUpXd1wdoMDNjFyl46/view?usp=sharing",
        "time_complexity":"O(n)",
        "space_complexity":"O(n)",
        "advantages":"",
        "drawback":"",
        "usecase":""
    },
    {
        "id":4,
        "question":"Nearest greater element to right",
        "answer":"https://drive.google.com/file/d/1a45I8elo4KEOHAAY-hI908mOytfCNXXy/view?usp=sharing",
        "time_complexity":"O(n)",
        "space_complexity":"O(n)",
        "advantages":"",
        "drawback":"",
        "usecase":"The use case for this code could be in a variety of scenarios, such as financial analysis, where you want to find the next highest stock price or index value. It could also be useful in weather forecasting, where you want to find the next highest temperature or pressure value. In general, the NGE algorithm can be useful in any situation where you need to find the next highest or lowest value in a series of data."
    },
    {
        "id":5,
        "question":"Nearest greater element to left",
        "answer":"https://drive.google.com/file/d/1zShzgBXIykfPY-Ijtx8g7IDovjZINxkN/view?usp=sharing",
        "time_complexity":"O(n)",
        "space_complexity":"O(n)",
        "advantages":"",
        "drawback":"",
        "usecase":""
    }
],
"queue":[

],
"linkedlist":[
    {
         "id":1,
        "question":"Insert a node at the head",
        "answer":"",
        "time_complexity":"",
        "space_complexity":"",
        "advantages":"",
        "drawback":"",
        "usecase":""
    }
]
}

  
